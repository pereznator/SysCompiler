/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,7],$V1=[1,9],$V2=[1,10],$V3=[1,11],$V4=[1,12],$V5=[1,13],$V6=[1,14],$V7=[5,10,26,109,110,111,112,113],$V8=[14,16,24,64],$V9=[1,26],$Va=[1,34],$Vb=[1,48],$Vc=[1,58],$Vd=[1,38],$Ve=[1,39],$Vf=[1,41],$Vg=[1,42],$Vh=[1,43],$Vi=[1,44],$Vj=[1,45],$Vk=[1,46],$Vl=[1,47],$Vm=[1,49],$Vn=[1,50],$Vo=[1,51],$Vp=[1,52],$Vq=[1,53],$Vr=[1,54],$Vs=[1,55],$Vt=[1,56],$Vu=[1,57],$Vv=[1,63],$Vw=[1,65],$Vx=[16,18],$Vy=[13,16,18,25,31,59,60,63,64,79,80,81,82,83,84,85,86,87,88,89,90],$Vz=[1,69],$VA=[16,18,31],$VB=[1,76],$VC=[1,78],$VD=[1,70],$VE=[1,71],$VF=[1,72],$VG=[1,73],$VH=[1,74],$VI=[1,75],$VJ=[1,77],$VK=[1,79],$VL=[1,80],$VM=[1,81],$VN=[1,82],$VO=[1,83],$VP=[1,122],$VQ=[1,130],$VR=[1,131],$VS=[1,132],$VT=[1,120],$VU=[1,121],$VV=[1,128],$VW=[1,129],$VX=[1,124],$VY=[1,125],$VZ=[1,127],$V_=[1,126],$V$=[1,137],$V01=[13,16,18,25,31,59,60,63,64,79,80,85,86,87,88,89,90],$V11=[13,16,18,25,31,59,60,89,90],$V21=[5,10,14,26,31,48,49,50,51,53,54,62,65,66,69,72,73,76,77,78,109,110,111,112,113],$V31=[14,31,48,49,50,51,54,62,65,66,69,72,73,76,77,78,109,110,111,112,113],$V41=[1,176],$V51=[1,175],$V61=[1,177],$V71=[1,178],$V81=[13,16,18,25,31,59,60,63,64,79,80,81,82,85,86,87,88,89,90],$V91=[13,16,18,25,31,59,60,63,64,85,86,87,88,89,90],$Va1=[1,209],$Vb1=[1,211],$Vc1=[13,16],$Vd1=[1,213],$Ve1=[1,214],$Vf1=[1,215],$Vg1=[13,16,18],$Vh1=[1,232],$Vi1=[1,235],$Vj1=[13,18,56],$Vk1=[14,15,31,48,49,50,51,54,62,65,66,69,72,73,76,77,78,80,91,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113],$Vl1=[14,15,80,91,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108],$Vm1=[2,96],$Vn1=[1,294],$Vo1=[31,76,77];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INIT":3,"INSTRUCCIONES":4,"EOF":5,"INSTRUCCION":6,"STRTWITH":7,"DECFUNCION":8,"DECMETODO":9,"start":10,"with":11,"LLAMADA":12,";":13,"id":14,"(":15,")":16,"LISTAEXPRESIONES":17,",":18,"EXPRESION":19,"TIPOSDATOS":20,"VECFUNCINO":21,"STATEMENT":22,"DEFPARAMETROS":23,"[":24,"]":25,"void":26,"DECDYNAMICLIST":27,"DECVECTOR":28,"{":29,"CONTENIDO":30,"}":31,"SEGMENTO":32,"INSIF":33,"INSWHILE":34,"INSDECLARACION":35,"INSFOR":36,"INSDOWHILE":37,"INSWRITELINE":38,"INSSWITCH":39,"ASIGNACION":40,"ACTUALIZACION":41,"ASIGNACIONVECTOR":42,"APPEND":43,"SETVALUE":44,"BREAK":45,"CONTINUE":46,"RETURN":47,"break":48,"continue":49,"return":50,"if":51,"INSELSE":52,"else":53,"while":54,"LISTAIDS":55,"=":56,"TERNARIO":57,"CASTEO":58,"?":59,":":60,"new":61,"dynamiclist":62,"<":63,">":64,"append":65,"setvalue":66,"FORINICIO":67,"FORFINAL":68,"for":69,"++":70,"--":71,"do":72,"switch":73,"INSCASES":74,"INSDEFAULT":75,"case":76,"default":77,"writeline":78,"+":79,"-":80,"*":81,"/":82,"^":83,"%":84,"<=":85,">=":86,"==":87,"!=":88,"&&":89,"||":90,"!":91,"VALOR":92,"numero":93,"decimal":94,"cadena":95,"caracter":96,"true":97,"false":98,"null":99,"getvalue":100,"tolower":101,"toupper":102,"length":103,"truncate":104,"round":105,"typeof":106,"tostring":107,"tochararray":108,"string":109,"int":110,"double":111,"boolean":112,"char":113,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",10:"start",11:"with",13:";",14:"id",15:"(",16:")",18:",",24:"[",25:"]",26:"void",29:"{",31:"}",48:"break",49:"continue",50:"return",51:"if",53:"else",54:"while",56:"=",59:"?",60:":",61:"new",62:"dynamiclist",63:"<",64:">",65:"append",66:"setvalue",69:"for",70:"++",71:"--",72:"do",73:"switch",76:"case",77:"default",78:"writeline",79:"+",80:"-",81:"*",82:"/",83:"^",84:"%",85:"<=",86:">=",87:"==",88:"!=",89:"&&",90:"||",91:"!",93:"numero",94:"decimal",95:"cadena",96:"caracter",97:"true",98:"false",99:"null",100:"getvalue",101:"tolower",102:"toupper",103:"length",104:"truncate",105:"round",106:"typeof",107:"tostring",108:"tochararray",109:"string",110:"int",111:"double",112:"boolean",113:"char"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,1],[7,4],[12,3],[12,4],[17,3],[17,1],[8,6],[8,7],[21,2],[21,0],[9,5],[9,6],[23,4],[23,3],[23,3],[23,2],[23,1],[23,1],[22,3],[22,2],[30,2],[30,1],[32,1],[32,1],[32,2],[32,1],[32,1],[32,1],[32,1],[32,1],[32,2],[32,2],[32,2],[32,1],[32,2],[32,1],[32,1],[32,1],[32,1],[32,1],[45,2],[46,2],[47,3],[47,2],[33,6],[52,2],[52,2],[52,0],[34,5],[35,3],[35,5],[35,5],[35,5],[35,5],[35,7],[35,7],[35,7],[55,3],[55,1],[40,3],[40,3],[40,3],[40,5],[40,5],[40,5],[57,5],[58,4],[28,10],[28,8],[28,4],[28,6],[42,7],[27,11],[27,7],[27,5],[43,7],[44,9],[67,1],[67,2],[68,1],[68,1],[36,8],[41,2],[41,2],[37,7],[39,8],[39,7],[74,5],[74,4],[75,3],[75,0],[38,5],[19,3],[19,3],[19,3],[19,3],[19,3],[19,3],[19,2],[19,3],[19,3],[19,3],[19,3],[19,3],[19,3],[19,3],[19,3],[19,2],[19,1],[92,1],[92,1],[92,1],[92,1],[92,1],[92,1],[92,1],[92,1],[92,4],[92,6],[92,4],[92,4],[92,4],[92,4],[92,4],[92,4],[92,4],[92,4],[92,3],[92,1],[20,1],[20,1],[20,1],[20,1],[20,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

        return {contenido: $$[$0-1], errores: errores};
    
break;
case 2: case 26:

        $$[$0-1].push($$[$0]);
        this.$ = $$[$0-1];
    
break;
case 3: case 11: case 27: case 64:

        this.$ = [$$[$0]];
    
break;
case 4: case 5: case 6: case 51: case 52: case 85: case 86: case 114: case 134:

        this.$ = $$[$0];
    
break;
case 7:

        this.$ = new StartWith($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column);
    
break;
case 8:

        this.$ = new Llamada($$[$0-2], new Array(), _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 9:

        this.$ = new Llamada($$[$0-3], $$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column);
    
break;
case 10: case 19: case 20: case 63:

        $$[$0-2].push($$[$0]);
        this.$ = $$[$0-2];
    
break;
case 12:

        this.$ = new FuncionInstruccion($$[$0-4], $$[$0], new Array(), $$[$0-5], $$[$0-3], _$[$0-5].first_line, _$[$0-5].first_column);
    
break;
case 13:

        this.$ = new FuncionInstruccion($$[$0-5], $$[$0], $$[$0-2], $$[$0-6], $$[$0-4], _$[$0-6].first_line, _$[$0-6].first_column);
    
break;
case 14:

         this.$ = 'array';
     
break;
case 16:

        this.$ = new MetodoInstruccion($$[$0-3], $$[$0], new Array(), _$[$0-4].first_line, _$[$0-4].first_column);
    
break;
case 17:

        this.$ = new MetodoInstruccion($$[$0-4], $$[$0], $$[$0-2], _$[$0-5].first_line, _$[$0-5].first_column);
    
break;
case 18:

        $$[$0-3].push(new Declaracion($$[$0-1], $$[$0], null, _$[$0-3].first_line, _$[$0-3].first_column));
        this.$ = $$[$0-3];
    
break;
case 21:

        this.$ = [new Declaracion($$[$0-1], $$[$0], null, _$[$0-1].first_line, _$[$0-1].first_column)];
    
break;
case 22: case 23:

        this.$ = [$$[$0]]
    
break;
case 24:

        this.$ = new Statement($$[$0-1], _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 25:

        this.$ = new Statement(new Array(), _$[$0-1].first_line, _$[$0-1].first_column);
    
break;
case 46:

        this.$ = new Break(_$[$0-1].first_line, _$[$0-1].first_column);
    
break;
case 47:

        this.$ = new Continue(_$[$0-1].first_line, _$[$0-1].first_column);
    
break;
case 48:

        this.$ = new Return($$[$0-1], _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 49:

        this.$ = new Return(null, _$[$0-1].first_line, _$[$0-1].first_column);
    
break;
case 50:

        this.$ = new IfInstruccion($$[$0-3], $$[$0-1], $$[$0], _$[$0-5].first_line, _$[$0-5].first_column);
    
break;
case 53: case 96:

        this.$ = null;
    
break;
case 54:

        this.$ = new WhileInstruccion($$[$0-2], $$[$0], _$[$0-4].first_line, _$[$0-4].first_column);
    
break;
case 55:

        this.$ = new Declaracion($$[$0-2], $$[$0-1], null, _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 56:

        $$[$0-1].push($$[$0-3]);
        this.$ = new DeclaracionMultiple($$[$0-4], $$[$0-1], null, _$[$0-4].first_line, _$[$0-4].first_column);
    
break;
case 57: case 58: case 59:

        this.$ = new Declaracion($$[$0-4], $$[$0-3], $$[$0-1], _$[$0-4].first_line, _$[$0-4].first_column);
    
break;
case 60: case 61: case 62:

        $$[$0-3].push($$[$0-5]);
        this.$ = new DeclaracionMultiple($$[$0-6], $$[$0-3], $$[$0-1], _$[$0-6].first_line, _$[$0-6].first_column);
    
break;
case 65: case 66: case 67:

        this.$ = new Asignacion(null, $$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 68: case 69: case 70:

        $$[$0-2].push($$[$0-4]);
        this.$ = new AsignacionMultiple($$[$0-2], $$[$0], _$[$0-4].first_line, _$[$0-4].first_column);
    
break;
case 71:

        this.$ = new Ternario($$[$0-4], $$[$0-2], $$[$0], _$[$0-4].first_line, _$[$0-4].first_column);
    
break;
case 72:

        this.$ = new Casteo($$[$0-2], $$[$0], _$[$0-3].first_line, _$[$0-3].first_column);
    
break;
case 73:

        this.$ = new DeclaracionVector($$[$0-9], $$[$0-8], $$[$0-1], null, null, _$[$0-9].first_line, _$[$0-9].first_column);
    
break;
case 74:

        this.$ = new DeclaracionVector($$[$0-7], $$[$0-6], null, $$[$0-1], null, _$[$0-7].first_line, _$[$0-7].first_column);
    
break;
case 75:

        this.$ = new DeclaracionVector($$[$0-3], $$[$0-2], null, null, null, _$[$0-3].first_line, _$[$0-3].first_column);
    
break;
case 76:

        this.$ = new DeclaracionVector($$[$0-5], $$[$0-4], null, null, $$[$0], _$[$0-5].first_line, _$[$0-5].first_column);
    
break;
case 77:

        this.$ = new AsignacionVector($$[$0-6], $$[$0-4], $$[$0-1], _$[$0-6].first_line, _$[$0-6].first_column);
    
break;
case 78:

        this.$ = new DeclaracionDynamic($$[$0-8], $$[$0-1], $$[$0-6], null, _$[$0-10].first_line, _$[$0-10].first_column);
    
break;
case 79:

        this.$ = new DeclaracionDynamic($$[$0-4], null, $$[$0-2], $$[$0], _$[$0-6].first_line, _$[$0-6].first_column);
    
break;
case 80:

        this.$ = new DeclaracionDynamic($$[$0-2], null, $$[$0], null, _$[$0-4].first_line, _$[$0-4].first_column);
    
break;
case 81:

        this.$ = new AppendInstruccion($$[$0-4], $$[$0-2], _$[$0-6].first_line, _$[$0-6].first_column);
    
break;
case 82:

        this.$ = new SetValue($$[$0-6], $$[$0-4], $$[$0-2], _$[$0-8].first_line, _$[$0-8].first_column);
    
break;
case 83:

        this.$ = $$[$0]
    
break;
case 84:

        this.$ = $$[$0-1]
    
break;
case 87:

        this.$ = new ForInstruccion($$[$0-5], $$[$0-4], $$[$0-2], $$[$0], _$[$0-7].first_line, _$[$0-7].first_column);
    
break;
case 88:

        this.$ = new Actualizacion($$[$0-1], OpcionActualizacion.MASMAS, _$[$0-1].first_line, _$[$0-1].first_column);
    
break;
case 89:

        this.$ = new Actualizacion($$[$0-1], OpcionActualizacion.MENOSMENOS, _$[$0-1].first_line, _$[$0-1].first_column);
    
break;
case 90:

        this.$ = new DoWhileInstruccion($$[$0-2], $$[$0-5], _$[$0-6].first_line, _$[$0-6].first_column);
    
break;
case 91:

        this.$ = new SwitchInstruccion($$[$0-5], $$[$0-2], $$[$0-1], _$[$0-7].first_line, _$[$0-7].first_column);
    
break;
case 92:

        this.$ = new SwitchInstruccion($$[$0-4], null, $$[$0-1], _$[$0-6].first_line, _$[$0-6].first_column);
    
break;
case 93:

        $$[$0-4].push(new CaseInstruccion($$[$0-2], $$[$0], _$[$0-4].first_line, _$[$0-4].first_column));
        this.$ = $$[$0-4];
    
break;
case 94:

        this.$ = [new CaseInstruccion($$[$0-2], $$[$0], _$[$0-3].first_line, _$[$0-3].first_column)];
    
break;
case 95:

        this.$ = new Statement($$[$0], _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 97:

        this.$ = new WriteLine($$[$0-2], _$[$0-4].first_line, _$[$0-4].first_column);
    
break;
case 98:

        this.$ = new Aritmetica($$[$0-2], $$[$0], OperacionAritmetica.SUMA, _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 99:

        this.$ = new Aritmetica($$[$0-2], $$[$0], OperacionAritmetica.RESTA, _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 100:

        this.$ = new Aritmetica($$[$0-2], $$[$0], OperacionAritmetica.MULTI, _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 101:

        this.$ = new Aritmetica($$[$0-2], $$[$0], OperacionAritmetica.DIV, _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 102:

        this.$ = new Aritmetica($$[$0-2], $$[$0], OperacionAritmetica.POT, _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 103:

        this.$ = new Aritmetica($$[$0-2], $$[$0], OperacionAritmetica.MOD, _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 104:

        this.$ = new Aritmetica(null, $$[$0], OperacionAritmetica.NEG, _$[$0-1].first_line, _$[$0-1].first_column);
    
break;
case 105:

        this.$ = new Relacional($$[$0-2], $$[$0], OpcionRelacional.MENOR, _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 106:

        this.$ = new Relacional($$[$0-2], $$[$0], OpcionRelacional.MENORIGUAL, _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 107:

        this.$ = new Relacional($$[$0-2], $$[$0], OpcionRelacional.MAYOR, _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 108:

        this.$ = new Relacional($$[$0-2], $$[$0], OpcionRelacional.MAYORIGUAL, _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 109:

        this.$ = new Relacional($$[$0-2], $$[$0], OpcionRelacional.IGUAL, _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 110:

        this.$ = new Relacional($$[$0-2], $$[$0], OpcionRelacional.DESIGUAL, _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 111:

        this.$ = new ExpresionLogica($$[$0-2], $$[$0], OperadoresLogicos.AND, _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 112:

        this.$ = new ExpresionLogica($$[$0-2], $$[$0], OperadoresLogicos.OR, _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 113:

        this.$ = new ExpresionLogica($$[$0], null, OperadoresLogicos.NOT, _$[$0-1].first_line, _$[$0-1].first_column);
    
break;
case 115:

        this.$ = new Literal($$[$0], _$[$0].first_line, _$[$0].first_column, Tipo.INT);
    
break;
case 116:

        this.$ = new Literal($$[$0], _$[$0].first_line, _$[$0].first_column, Tipo.DOUBLE);
    
break;
case 117:

        this.$ = new Literal($$[$0], _$[$0].first_line, _$[$0].first_column, Tipo.STRING);
    
break;
case 118:

        this.$ = new Literal($$[$0], _$[$0].first_line, _$[$0].first_column, Tipo.CHAR);
    
break;
case 119: case 120:

        this.$ = new Literal($$[$0], _$[$0].first_line, _$[$0].first_column, Tipo.BOOLEAN);
    
break;
case 121:

        this.$ = new Literal($$[$0], _$[$0].first_line, _$[$0].first_column, null);
    
break;
case 122:

        this.$ = new Acceso($$[$0], _$[$0].first_line, _$[$0].first_column);
    
break;
case 123:

        this.$ = new AccesoVector($$[$0-3], $$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column);
    
break;
case 124:

        this.$ = new GetValue($$[$0-3], $$[$0-1], _$[$0-5].first_line, _$[$0-5].first_column);
    
break;
case 125:

        this.$ = new ToLower($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column);
    
break;
case 126:

        this.$ = new ToUpper($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column);
    
break;
case 127:

        this.$ = new Length($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column);
    
break;
case 128:

        this.$ = new Truncate($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column);
    
break;
case 129:

        this.$ = new Round($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column);
    
break;
case 130:

        this.$ = new TypeOf($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column);
    
break;
case 131:

        this.$ = new ToString($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column);
    
break;
case 132:

        this.$ = new ToCharArray($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column);
    
break;
case 133:

        this.$ = $$[$0-1];
    
break;
case 135:

        this.$ = Tipo.STRING;
    
break;
case 136:

        this.$ = Tipo.INT;
    
break;
case 137:

        this.$ = Tipo.DOUBLE;
    
break;
case 138:

        this.$ = Tipo.BOOLEAN;
    
break;
case 139:

        this.$ = Tipo.CHAR;
    
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:5,9:6,10:$V0,20:8,26:$V1,109:$V2,110:$V3,111:$V4,112:$V5,113:$V6},{1:[3]},{5:[1,15],6:16,7:4,8:5,9:6,10:$V0,20:8,26:$V1,109:$V2,110:$V3,111:$V4,112:$V5,113:$V6},o($V7,[2,3]),o($V7,[2,4]),o($V7,[2,5]),o($V7,[2,6]),{11:[1,17]},{14:[1,18]},{14:[1,19]},o($V8,[2,135]),o($V8,[2,136]),o($V8,[2,137]),o($V8,[2,138]),o($V8,[2,139]),{1:[2,1]},o($V7,[2,2]),{12:20,14:[1,21]},{15:[2,15],21:22,24:[1,23]},{15:[1,24]},{13:[1,25]},{15:$V9},{15:[1,27]},{25:[1,28]},{16:[1,29],20:31,23:30,27:32,28:33,62:$Va,109:$V2,110:$V3,111:$V4,112:$V5,113:$V6},o($V7,[2,7]),{12:59,14:$Vb,15:$Vc,16:[1,35],17:36,19:37,80:$Vd,91:$Ve,92:40,93:$Vf,94:$Vg,95:$Vh,96:$Vi,97:$Vj,98:$Vk,99:$Vl,100:$Vm,101:$Vn,102:$Vo,103:$Vp,104:$Vq,105:$Vr,106:$Vs,107:$Vt,108:$Vu},{16:[1,60],20:31,23:61,27:32,28:33,62:$Va,109:$V2,110:$V3,111:$V4,112:$V5,113:$V6},{15:[2,14]},{22:62,29:$Vv},{16:[1,64],18:$Vw},{14:[1,66]},o($Vx,[2,22]),o($Vx,[2,23]),{63:[1,67]},o($Vy,[2,8]),{16:[1,68],18:$Vz},o($VA,[2,11],{63:$VB,64:$VC,79:$VD,80:$VE,81:$VF,82:$VG,83:$VH,84:$VI,85:$VJ,86:$VK,87:$VL,88:$VM,89:$VN,90:$VO}),{12:59,14:$Vb,15:$Vc,19:84,80:$Vd,91:$Ve,92:40,93:$Vf,94:$Vg,95:$Vh,96:$Vi,97:$Vj,98:$Vk,99:$Vl,100:$Vm,101:$Vn,102:$Vo,103:$Vp,104:$Vq,105:$Vr,106:$Vs,107:$Vt,108:$Vu},{12:59,14:$Vb,15:$Vc,19:85,80:$Vd,91:$Ve,92:40,93:$Vf,94:$Vg,95:$Vh,96:$Vi,97:$Vj,98:$Vk,99:$Vl,100:$Vm,101:$Vn,102:$Vo,103:$Vp,104:$Vq,105:$Vr,106:$Vs,107:$Vt,108:$Vu},o($Vy,[2,114]),o($Vy,[2,115]),o($Vy,[2,116]),o($Vy,[2,117]),o($Vy,[2,118]),o($Vy,[2,119]),o($Vy,[2,120]),o($Vy,[2,121]),o($Vy,[2,122],{15:$V9,24:[1,86]}),{15:[1,87]},{15:[1,88]},{15:[1,89]},{15:[1,90]},{15:[1,91]},{15:[1,92]},{15:[1,93]},{15:[1,94]},{15:[1,95]},{12:59,14:$Vb,15:$Vc,19:96,80:$Vd,91:$Ve,92:40,93:$Vf,94:$Vg,95:$Vh,96:$Vi,97:$Vj,98:$Vk,99:$Vl,100:$Vm,101:$Vn,102:$Vo,103:$Vp,104:$Vq,105:$Vr,106:$Vs,107:$Vt,108:$Vu},o($Vy,[2,134]),{22:97,29:$Vv},{16:[1,98],18:$Vw},o($V7,[2,16]),{12:104,14:$VP,20:123,27:114,28:112,30:99,31:[1,100],32:101,33:102,34:103,35:105,36:106,37:107,38:108,39:109,40:110,41:111,42:113,43:115,44:116,45:117,46:118,47:119,48:$VQ,49:$VR,50:$VS,51:$VT,54:$VU,62:$Va,65:$VV,66:$VW,69:$VX,72:$VY,73:$VZ,78:$V_,109:$V2,110:$V3,111:$V4,112:$V5,113:$V6},{22:133,29:$Vv},{20:134,27:135,28:136,62:$Va,109:$V2,110:$V3,111:$V4,112:$V5,113:$V6},o($Vx,[2,21],{24:$V$}),{20:138,109:$V2,110:$V3,111:$V4,112:$V5,113:$V6},o($Vy,[2,9]),{12:59,14:$Vb,15:$Vc,19:139,80:$Vd,91:$Ve,92:40,93:$Vf,94:$Vg,95:$Vh,96:$Vi,97:$Vj,98:$Vk,99:$Vl,100:$Vm,101:$Vn,102:$Vo,103:$Vp,104:$Vq,105:$Vr,106:$Vs,107:$Vt,108:$Vu},{12:59,14:$Vb,15:$Vc,19:140,80:$Vd,91:$Ve,92:40,93:$Vf,94:$Vg,95:$Vh,96:$Vi,97:$Vj,98:$Vk,99:$Vl,100:$Vm,101:$Vn,102:$Vo,103:$Vp,104:$Vq,105:$Vr,106:$Vs,107:$Vt,108:$Vu},{12:59,14:$Vb,15:$Vc,19:141,80:$Vd,91:$Ve,92:40,93:$Vf,94:$Vg,95:$Vh,96:$Vi,97:$Vj,98:$Vk,99:$Vl,100:$Vm,101:$Vn,102:$Vo,103:$Vp,104:$Vq,105:$Vr,106:$Vs,107:$Vt,108:$Vu},{12:59,14:$Vb,15:$Vc,19:142,80:$Vd,91:$Ve,92:40,93:$Vf,94:$Vg,95:$Vh,96:$Vi,97:$Vj,98:$Vk,99:$Vl,100:$Vm,101:$Vn,102:$Vo,103:$Vp,104:$Vq,105:$Vr,106:$Vs,107:$Vt,108:$Vu},{12:59,14:$Vb,15:$Vc,19:143,80:$Vd,91:$Ve,92:40,93:$Vf,94:$Vg,95:$Vh,96:$Vi,97:$Vj,98:$Vk,99:$Vl,100:$Vm,101:$Vn,102:$Vo,103:$Vp,104:$Vq,105:$Vr,106:$Vs,107:$Vt,108:$Vu},{12:59,14:$Vb,15:$Vc,19:144,80:$Vd,91:$Ve,92:40,93:$Vf,94:$Vg,95:$Vh,96:$Vi,97:$Vj,98:$Vk,99:$Vl,100:$Vm,101:$Vn,102:$Vo,103:$Vp,104:$Vq,105:$Vr,106:$Vs,107:$Vt,108:$Vu},{12:59,14:$Vb,15:$Vc,19:145,80:$Vd,91:$Ve,92:40,93:$Vf,94:$Vg,95:$Vh,96:$Vi,97:$Vj,98:$Vk,99:$Vl,100:$Vm,101:$Vn,102:$Vo,103:$Vp,104:$Vq,105:$Vr,106:$Vs,107:$Vt,108:$Vu},{12:59,14:$Vb,15:$Vc,19:146,80:$Vd,91:$Ve,92:40,93:$Vf,94:$Vg,95:$Vh,96:$Vi,97:$Vj,98:$Vk,99:$Vl,100:$Vm,101:$Vn,102:$Vo,103:$Vp,104:$Vq,105:$Vr,106:$Vs,107:$Vt,108:$Vu},{12:59,14:$Vb,15:$Vc,19:147,80:$Vd,91:$Ve,92:40,93:$Vf,94:$Vg,95:$Vh,96:$Vi,97:$Vj,98:$Vk,99:$Vl,100:$Vm,101:$Vn,102:$Vo,103:$Vp,104:$Vq,105:$Vr,106:$Vs,107:$Vt,108:$Vu},{12:59,14:$Vb,15:$Vc,19:148,80:$Vd,91:$Ve,92:40,93:$Vf,94:$Vg,95:$Vh,96:$Vi,97:$Vj,98:$Vk,99:$Vl,100:$Vm,101:$Vn,102:$Vo,103:$Vp,104:$Vq,105:$Vr,106:$Vs,107:$Vt,108:$Vu},{12:59,14:$Vb,15:$Vc,19:149,80:$Vd,91:$Ve,92:40,93:$Vf,94:$Vg,95:$Vh,96:$Vi,97:$Vj,98:$Vk,99:$Vl,100:$Vm,101:$Vn,102:$Vo,103:$Vp,104:$Vq,105:$Vr,106:$Vs,107:$Vt,108:$Vu},{12:59,14:$Vb,15:$Vc,19:150,80:$Vd,91:$Ve,92:40,93:$Vf,94:$Vg,95:$Vh,96:$Vi,97:$Vj,98:$Vk,99:$Vl,100:$Vm,101:$Vn,102:$Vo,103:$Vp,104:$Vq,105:$Vr,106:$Vs,107:$Vt,108:$Vu},{12:59,14:$Vb,15:$Vc,19:151,80:$Vd,91:$Ve,92:40,93:$Vf,94:$Vg,95:$Vh,96:$Vi,97:$Vj,98:$Vk,99:$Vl,100:$Vm,101:$Vn,102:$Vo,103:$Vp,104:$Vq,105:$Vr,106:$Vs,107:$Vt,108:$Vu},{12:59,14:$Vb,15:$Vc,19:152,80:$Vd,91:$Ve,92:40,93:$Vf,94:$Vg,95:$Vh,96:$Vi,97:$Vj,98:$Vk,99:$Vl,100:$Vm,101:$Vn,102:$Vo,103:$Vp,104:$Vq,105:$Vr,106:$Vs,107:$Vt,108:$Vu},{12:59,14:$Vb,15:$Vc,19:153,80:$Vd,91:$Ve,92:40,93:$Vf,94:$Vg,95:$Vh,96:$Vi,97:$Vj,98:$Vk,99:$Vl,100:$Vm,101:$Vn,102:$Vo,103:$Vp,104:$Vq,105:$Vr,106:$Vs,107:$Vt,108:$Vu},o($V01,[2,104],{81:$VF,82:$VG,83:$VH,84:$VI}),o($V11,[2,113],{63:$VB,64:$VC,79:$VD,80:$VE,81:$VF,82:$VG,83:$VH,84:$VI,85:$VJ,86:$VK,87:$VL,88:$VM}),{12:59,14:$Vb,15:$Vc,19:154,80:$Vd,91:$Ve,92:40,93:$Vf,94:$Vg,95:$Vh,96:$Vi,97:$Vj,98:$Vk,99:$Vl,100:$Vm,101:$Vn,102:$Vo,103:$Vp,104:$Vq,105:$Vr,106:$Vs,107:$Vt,108:$Vu},{14:[1,155]},{12:59,14:$Vb,15:$Vc,19:156,80:$Vd,91:$Ve,92:40,93:$Vf,94:$Vg,95:$Vh,96:$Vi,97:$Vj,98:$Vk,99:$Vl,100:$Vm,101:$Vn,102:$Vo,103:$Vp,104:$Vq,105:$Vr,106:$Vs,107:$Vt,108:$Vu},{12:59,14:$Vb,15:$Vc,19:157,80:$Vd,91:$Ve,92:40,93:$Vf,94:$Vg,95:$Vh,96:$Vi,97:$Vj,98:$Vk,99:$Vl,100:$Vm,101:$Vn,102:$Vo,103:$Vp,104:$Vq,105:$Vr,106:$Vs,107:$Vt,108:$Vu},{12:59,14:$Vb,15:$Vc,19:158,80:$Vd,91:$Ve,92:40,93:$Vf,94:$Vg,95:$Vh,96:$Vi,97:$Vj,98:$Vk,99:$Vl,100:$Vm,101:$Vn,102:$Vo,103:$Vp,104:$Vq,105:$Vr,106:$Vs,107:$Vt,108:$Vu},{12:59,14:$Vb,15:$Vc,19:159,80:$Vd,91:$Ve,92:40,93:$Vf,94:$Vg,95:$Vh,96:$Vi,97:$Vj,98:$Vk,99:$Vl,100:$Vm,101:$Vn,102:$Vo,103:$Vp,104:$Vq,105:$Vr,106:$Vs,107:$Vt,108:$Vu},{12:59,14:$Vb,15:$Vc,19:160,80:$Vd,91:$Ve,92:40,93:$Vf,94:$Vg,95:$Vh,96:$Vi,97:$Vj,98:$Vk,99:$Vl,100:$Vm,101:$Vn,102:$Vo,103:$Vp,104:$Vq,105:$Vr,106:$Vs,107:$Vt,108:$Vu},{12:59,14:$Vb,15:$Vc,19:161,80:$Vd,91:$Ve,92:40,93:$Vf,94:$Vg,95:$Vh,96:$Vi,97:$Vj,98:$Vk,99:$Vl,100:$Vm,101:$Vn,102:$Vo,103:$Vp,104:$Vq,105:$Vr,106:$Vs,107:$Vt,108:$Vu},{12:59,14:$Vb,15:$Vc,19:162,80:$Vd,91:$Ve,92:40,93:$Vf,94:$Vg,95:$Vh,96:$Vi,97:$Vj,98:$Vk,99:$Vl,100:$Vm,101:$Vn,102:$Vo,103:$Vp,104:$Vq,105:$Vr,106:$Vs,107:$Vt,108:$Vu},{12:59,14:$Vb,15:$Vc,19:163,80:$Vd,91:$Ve,92:40,93:$Vf,94:$Vg,95:$Vh,96:$Vi,97:$Vj,98:$Vk,99:$Vl,100:$Vm,101:$Vn,102:$Vo,103:$Vp,104:$Vq,105:$Vr,106:$Vs,107:$Vt,108:$Vu},{16:[1,164],63:$VB,64:$VC,79:$VD,80:$VE,81:$VF,82:$VG,83:$VH,84:$VI,85:$VJ,86:$VK,87:$VL,88:$VM,89:$VN,90:$VO},o($V7,[2,12]),{22:165,29:$Vv},{12:104,14:$VP,20:123,27:114,28:112,31:[1,166],32:167,33:102,34:103,35:105,36:106,37:107,38:108,39:109,40:110,41:111,42:113,43:115,44:116,45:117,46:118,47:119,48:$VQ,49:$VR,50:$VS,51:$VT,54:$VU,62:$Va,65:$VV,66:$VW,69:$VX,72:$VY,73:$VZ,78:$V_,109:$V2,110:$V3,111:$V4,112:$V5,113:$V6},o($V21,[2,25]),o($V31,[2,27]),o($V31,[2,28]),o($V31,[2,29]),{13:[1,168]},o($V31,[2,31]),o($V31,[2,32]),o($V31,[2,33]),o($V31,[2,34]),o($V31,[2,35]),{13:[1,169]},{13:[1,170]},{13:[1,171]},o($V31,[2,39]),{13:[1,172]},o($V31,[2,41]),o($V31,[2,42]),o($V31,[2,43]),o($V31,[2,44]),o($V31,[2,45]),{15:[1,173]},{15:[1,174]},{15:$V9,18:$V41,24:[1,179],56:$V51,70:$V61,71:$V71},{14:[1,180]},{15:[1,181]},{22:182,29:$Vv},{15:[1,183]},{15:[1,184]},{15:[1,185]},{15:[1,186]},{13:[1,187]},{13:[1,188]},{12:59,13:[1,190],14:$Vb,15:$Vc,19:189,80:$Vd,91:$Ve,92:40,93:$Vf,94:$Vg,95:$Vh,96:$Vi,97:$Vj,98:$Vk,99:$Vl,100:$Vm,101:$Vn,102:$Vo,103:$Vp,104:$Vq,105:$Vr,106:$Vs,107:$Vt,108:$Vu},o($V7,[2,17]),{14:[1,191]},o($Vx,[2,19]),o($Vx,[2,20]),{25:[1,192]},{64:[1,193]},o($VA,[2,10],{63:$VB,64:$VC,79:$VD,80:$VE,81:$VF,82:$VG,83:$VH,84:$VI,85:$VJ,86:$VK,87:$VL,88:$VM,89:$VN,90:$VO}),o($V01,[2,98],{81:$VF,82:$VG,83:$VH,84:$VI}),o($V01,[2,99],{81:$VF,82:$VG,83:$VH,84:$VI}),o($V81,[2,100],{83:$VH,84:$VI}),o($V81,[2,101],{83:$VH,84:$VI}),o($Vy,[2,102]),o($Vy,[2,103]),o($V91,[2,105],{79:$VD,80:$VE,81:$VF,82:$VG,83:$VH,84:$VI}),o($V91,[2,106],{79:$VD,80:$VE,81:$VF,82:$VG,83:$VH,84:$VI}),o($V91,[2,107],{79:$VD,80:$VE,81:$VF,82:$VG,83:$VH,84:$VI}),o($V91,[2,108],{79:$VD,80:$VE,81:$VF,82:$VG,83:$VH,84:$VI}),o($V91,[2,109],{79:$VD,80:$VE,81:$VF,82:$VG,83:$VH,84:$VI}),o($V91,[2,110],{79:$VD,80:$VE,81:$VF,82:$VG,83:$VH,84:$VI}),o($V11,[2,111],{63:$VB,64:$VC,79:$VD,80:$VE,81:$VF,82:$VG,83:$VH,84:$VI,85:$VJ,86:$VK,87:$VL,88:$VM}),o([13,16,18,25,31,59,60,90],[2,112],{63:$VB,64:$VC,79:$VD,80:$VE,81:$VF,82:$VG,83:$VH,84:$VI,85:$VJ,86:$VK,87:$VL,88:$VM,89:$VN}),{25:[1,194],63:$VB,64:$VC,79:$VD,80:$VE,81:$VF,82:$VG,83:$VH,84:$VI,85:$VJ,86:$VK,87:$VL,88:$VM,89:$VN,90:$VO},{18:[1,195]},{16:[1,196],63:$VB,64:$VC,79:$VD,80:$VE,81:$VF,82:$VG,83:$VH,84:$VI,85:$VJ,86:$VK,87:$VL,88:$VM,89:$VN,90:$VO},{16:[1,197],63:$VB,64:$VC,79:$VD,80:$VE,81:$VF,82:$VG,83:$VH,84:$VI,85:$VJ,86:$VK,87:$VL,88:$VM,89:$VN,90:$VO},{16:[1,198],63:$VB,64:$VC,79:$VD,80:$VE,81:$VF,82:$VG,83:$VH,84:$VI,85:$VJ,86:$VK,87:$VL,88:$VM,89:$VN,90:$VO},{16:[1,199],63:$VB,64:$VC,79:$VD,80:$VE,81:$VF,82:$VG,83:$VH,84:$VI,85:$VJ,86:$VK,87:$VL,88:$VM,89:$VN,90:$VO},{16:[1,200],63:$VB,64:$VC,79:$VD,80:$VE,81:$VF,82:$VG,83:$VH,84:$VI,85:$VJ,86:$VK,87:$VL,88:$VM,89:$VN,90:$VO},{16:[1,201],63:$VB,64:$VC,79:$VD,80:$VE,81:$VF,82:$VG,83:$VH,84:$VI,85:$VJ,86:$VK,87:$VL,88:$VM,89:$VN,90:$VO},{16:[1,202],63:$VB,64:$VC,79:$VD,80:$VE,81:$VF,82:$VG,83:$VH,84:$VI,85:$VJ,86:$VK,87:$VL,88:$VM,89:$VN,90:$VO},{16:[1,203],63:$VB,64:$VC,79:$VD,80:$VE,81:$VF,82:$VG,83:$VH,84:$VI,85:$VJ,86:$VK,87:$VL,88:$VM,89:$VN,90:$VO},o($Vy,[2,133]),o($V7,[2,13]),o($V21,[2,24]),o($V31,[2,26]),o($V31,[2,30]),o($V31,[2,36]),o($V31,[2,37]),o($V31,[2,38]),o($V31,[2,40]),{12:59,14:$Vb,15:$Vc,19:204,80:$Vd,91:$Ve,92:40,93:$Vf,94:$Vg,95:$Vh,96:$Vi,97:$Vj,98:$Vk,99:$Vl,100:$Vm,101:$Vn,102:$Vo,103:$Vp,104:$Vq,105:$Vr,106:$Vs,107:$Vt,108:$Vu},{12:59,14:$Vb,15:$Vc,19:205,80:$Vd,91:$Ve,92:40,93:$Vf,94:$Vg,95:$Vh,96:$Vi,97:$Vj,98:$Vk,99:$Vl,100:$Vm,101:$Vn,102:$Vo,103:$Vp,104:$Vq,105:$Vr,106:$Vs,107:$Vt,108:$Vu},{12:59,14:$Vb,15:$Va1,19:206,57:207,58:208,80:$Vd,91:$Ve,92:40,93:$Vf,94:$Vg,95:$Vh,96:$Vi,97:$Vj,98:$Vk,99:$Vl,100:$Vm,101:$Vn,102:$Vo,103:$Vp,104:$Vq,105:$Vr,106:$Vs,107:$Vt,108:$Vu},{14:$Vb1,55:210},o($Vc1,[2,88]),o($Vc1,[2,89]),{12:59,14:$Vb,15:$Vc,19:212,80:$Vd,91:$Ve,92:40,93:$Vf,94:$Vg,95:$Vh,96:$Vi,97:$Vj,98:$Vk,99:$Vl,100:$Vm,101:$Vn,102:$Vo,103:$Vp,104:$Vq,105:$Vr,106:$Vs,107:$Vt,108:$Vu},{13:$Vd1,18:$Ve1,24:$V$,56:$Vf1},{14:[1,220],20:219,35:217,40:218,67:216,109:$V2,110:$V3,111:$V4,112:$V5,113:$V6},{54:[1,221]},{12:59,14:$Vb,15:$Vc,19:222,80:$Vd,91:$Ve,92:40,93:$Vf,94:$Vg,95:$Vh,96:$Vi,97:$Vj,98:$Vk,99:$Vl,100:$Vm,101:$Vn,102:$Vo,103:$Vp,104:$Vq,105:$Vr,106:$Vs,107:$Vt,108:$Vu},{12:59,14:$Vb,15:$Vc,19:223,80:$Vd,91:$Ve,92:40,93:$Vf,94:$Vg,95:$Vh,96:$Vi,97:$Vj,98:$Vk,99:$Vl,100:$Vm,101:$Vn,102:$Vo,103:$Vp,104:$Vq,105:$Vr,106:$Vs,107:$Vt,108:$Vu},{14:[1,224]},{14:[1,225]},o($V31,[2,46]),o($V31,[2,47]),{13:[1,226],63:$VB,64:$VC,79:$VD,80:$VE,81:$VF,82:$VG,83:$VH,84:$VI,85:$VJ,86:$VK,87:$VL,88:$VM,89:$VN,90:$VO},o($V31,[2,49]),o($Vx,[2,18],{24:$V$}),o($Vg1,[2,75],{56:[1,227]}),{14:[1,228]},o($Vy,[2,123]),{12:59,14:$Vb,15:$Vc,19:229,80:$Vd,91:$Ve,92:40,93:$Vf,94:$Vg,95:$Vh,96:$Vi,97:$Vj,98:$Vk,99:$Vl,100:$Vm,101:$Vn,102:$Vo,103:$Vp,104:$Vq,105:$Vr,106:$Vs,107:$Vt,108:$Vu},o($Vy,[2,125]),o($Vy,[2,126]),o($Vy,[2,127]),o($Vy,[2,128]),o($Vy,[2,129]),o($Vy,[2,130]),o($Vy,[2,131]),o($Vy,[2,132]),{16:[1,230],63:$VB,64:$VC,79:$VD,80:$VE,81:$VF,82:$VG,83:$VH,84:$VI,85:$VJ,86:$VK,87:$VL,88:$VM,89:$VN,90:$VO},{16:[1,231],63:$VB,64:$VC,79:$VD,80:$VE,81:$VF,82:$VG,83:$VH,84:$VI,85:$VJ,86:$VK,87:$VL,88:$VM,89:$VN,90:$VO},o($Vc1,[2,65],{59:$Vh1,63:$VB,64:$VC,79:$VD,80:$VE,81:$VF,82:$VG,83:$VH,84:$VI,85:$VJ,86:$VK,87:$VL,88:$VM,89:$VN,90:$VO}),o($Vc1,[2,66]),o($Vc1,[2,67]),{12:59,14:$Vb,15:$Vc,19:96,20:233,80:$Vd,91:$Ve,92:40,93:$Vf,94:$Vg,95:$Vh,96:$Vi,97:$Vj,98:$Vk,99:$Vl,100:$Vm,101:$Vn,102:$Vo,103:$Vp,104:$Vq,105:$Vr,106:$Vs,107:$Vt,108:$Vu,109:$V2,110:$V3,111:$V4,112:$V5,113:$V6},{18:$Vi1,56:[1,234]},o($Vj1,[2,64]),{25:[1,236],63:$VB,64:$VC,79:$VD,80:$VE,81:$VF,82:$VG,83:$VH,84:$VI,85:$VJ,86:$VK,87:$VL,88:$VM,89:$VN,90:$VO},o($Vk1,[2,55]),{14:$Vb1,55:237},{12:59,14:$Vb,15:$Va1,19:238,57:239,58:240,80:$Vd,91:$Ve,92:40,93:$Vf,94:$Vg,95:$Vh,96:$Vi,97:$Vj,98:$Vk,99:$Vl,100:$Vm,101:$Vn,102:$Vo,103:$Vp,104:$Vq,105:$Vr,106:$Vs,107:$Vt,108:$Vu},{12:59,14:$Vb,15:$Vc,19:241,80:$Vd,91:$Ve,92:40,93:$Vf,94:$Vg,95:$Vh,96:$Vi,97:$Vj,98:$Vk,99:$Vl,100:$Vm,101:$Vn,102:$Vo,103:$Vp,104:$Vq,105:$Vr,106:$Vs,107:$Vt,108:$Vu},o($Vl1,[2,83]),{13:[1,242]},{14:[1,243]},{18:$V41,56:$V51},{15:[1,244]},{16:[1,245],63:$VB,64:$VC,79:$VD,80:$VE,81:$VF,82:$VG,83:$VH,84:$VI,85:$VJ,86:$VK,87:$VL,88:$VM,89:$VN,90:$VO},{16:[1,246],63:$VB,64:$VC,79:$VD,80:$VE,81:$VF,82:$VG,83:$VH,84:$VI,85:$VJ,86:$VK,87:$VL,88:$VM,89:$VN,90:$VO},{18:[1,247]},{18:[1,248]},o($V31,[2,48]),{12:59,14:$Vb,15:$Vc,19:251,29:[1,250],61:[1,249],80:$Vd,91:$Ve,92:40,93:$Vf,94:$Vg,95:$Vh,96:$Vi,97:$Vj,98:$Vk,99:$Vl,100:$Vm,101:$Vn,102:$Vo,103:$Vp,104:$Vq,105:$Vr,106:$Vs,107:$Vt,108:$Vu},o($Vg1,[2,80],{56:[1,252]}),{16:[1,253],63:$VB,64:$VC,79:$VD,80:$VE,81:$VF,82:$VG,83:$VH,84:$VI,85:$VJ,86:$VK,87:$VL,88:$VM,89:$VN,90:$VO},{22:254,29:$Vv},{22:255,29:$Vv},{12:59,14:$Vb,15:$Vc,19:256,80:$Vd,91:$Ve,92:40,93:$Vf,94:$Vg,95:$Vh,96:$Vi,97:$Vj,98:$Vk,99:$Vl,100:$Vm,101:$Vn,102:$Vo,103:$Vp,104:$Vq,105:$Vr,106:$Vs,107:$Vt,108:$Vu},{16:[1,257]},{12:59,14:$Vb,15:$Va1,19:258,57:259,58:260,80:$Vd,91:$Ve,92:40,93:$Vf,94:$Vg,95:$Vh,96:$Vi,97:$Vj,98:$Vk,99:$Vl,100:$Vm,101:$Vn,102:$Vo,103:$Vp,104:$Vq,105:$Vr,106:$Vs,107:$Vt,108:$Vu},{14:[1,261]},{56:[1,262]},{13:[1,263],18:$Vi1,56:[1,264]},{13:[1,265],59:$Vh1,63:$VB,64:$VC,79:$VD,80:$VE,81:$VF,82:$VG,83:$VH,84:$VI,85:$VJ,86:$VK,87:$VL,88:$VM,89:$VN,90:$VO},{13:[1,266]},{13:[1,267]},{13:[1,268],63:$VB,64:$VC,79:$VD,80:$VE,81:$VF,82:$VG,83:$VH,84:$VI,85:$VJ,86:$VK,87:$VL,88:$VM,89:$VN,90:$VO},o($Vl1,[2,84]),{13:$Vd1,18:$Ve1,56:$Vf1},{12:59,14:$Vb,15:$Vc,19:269,80:$Vd,91:$Ve,92:40,93:$Vf,94:$Vg,95:$Vh,96:$Vi,97:$Vj,98:$Vk,99:$Vl,100:$Vm,101:$Vn,102:$Vo,103:$Vp,104:$Vq,105:$Vr,106:$Vs,107:$Vt,108:$Vu},{13:[1,270]},{29:[1,271]},{12:59,14:$Vb,15:$Vc,19:272,80:$Vd,91:$Ve,92:40,93:$Vf,94:$Vg,95:$Vh,96:$Vi,97:$Vj,98:$Vk,99:$Vl,100:$Vm,101:$Vn,102:$Vo,103:$Vp,104:$Vq,105:$Vr,106:$Vs,107:$Vt,108:$Vu},{12:59,14:$Vb,15:$Vc,19:273,80:$Vd,91:$Ve,92:40,93:$Vf,94:$Vg,95:$Vh,96:$Vi,97:$Vj,98:$Vk,99:$Vl,100:$Vm,101:$Vn,102:$Vo,103:$Vp,104:$Vq,105:$Vr,106:$Vs,107:$Vt,108:$Vu},{20:274,109:$V2,110:$V3,111:$V4,112:$V5,113:$V6},{12:59,14:$Vb,15:$Vc,17:275,19:37,80:$Vd,91:$Ve,92:40,93:$Vf,94:$Vg,95:$Vh,96:$Vi,97:$Vj,98:$Vk,99:$Vl,100:$Vm,101:$Vn,102:$Vo,103:$Vp,104:$Vq,105:$Vr,106:$Vs,107:$Vt,108:$Vu},o($Vg1,[2,76],{63:$VB,64:$VC,79:$VD,80:$VE,81:$VF,82:$VG,83:$VH,84:$VI,85:$VJ,86:$VK,87:$VL,88:$VM,89:$VN,90:$VO}),{12:59,14:$Vb,15:$Vc,19:277,61:[1,276],80:$Vd,91:$Ve,92:40,93:$Vf,94:$Vg,95:$Vh,96:$Vi,97:$Vj,98:$Vk,99:$Vl,100:$Vm,101:$Vn,102:$Vo,103:$Vp,104:$Vq,105:$Vr,106:$Vs,107:$Vt,108:$Vu},o($Vy,[2,124]),o($V31,[2,53],{52:278,53:[1,279]}),o($V31,[2,54]),{60:[1,280],63:$VB,64:$VC,79:$VD,80:$VE,81:$VF,82:$VG,83:$VH,84:$VI,85:$VJ,86:$VK,87:$VL,88:$VM,89:$VN,90:$VO},{12:59,14:$Vb,15:$Vc,19:281,80:$Vd,91:$Ve,92:40,93:$Vf,94:$Vg,95:$Vh,96:$Vi,97:$Vj,98:$Vk,99:$Vl,100:$Vm,101:$Vn,102:$Vo,103:$Vp,104:$Vq,105:$Vr,106:$Vs,107:$Vt,108:$Vu},o($Vc1,[2,68],{59:$Vh1,63:$VB,64:$VC,79:$VD,80:$VE,81:$VF,82:$VG,83:$VH,84:$VI,85:$VJ,86:$VK,87:$VL,88:$VM,89:$VN,90:$VO}),o($Vc1,[2,69]),o($Vc1,[2,70]),o($Vj1,[2,63]),{12:59,14:$Vb,15:$Vc,19:282,80:$Vd,91:$Ve,92:40,93:$Vf,94:$Vg,95:$Vh,96:$Vi,97:$Vj,98:$Vk,99:$Vl,100:$Vm,101:$Vn,102:$Vo,103:$Vp,104:$Vq,105:$Vr,106:$Vs,107:$Vt,108:$Vu},o($Vk1,[2,56]),{12:59,14:$Vb,15:$Va1,19:283,57:284,58:285,80:$Vd,91:$Ve,92:40,93:$Vf,94:$Vg,95:$Vh,96:$Vi,97:$Vj,98:$Vk,99:$Vl,100:$Vm,101:$Vn,102:$Vo,103:$Vp,104:$Vq,105:$Vr,106:$Vs,107:$Vt,108:$Vu},o($Vk1,[2,57]),o($Vk1,[2,58]),o($Vk1,[2,59]),{14:[1,289],40:287,41:288,68:286},{16:[1,290],63:$VB,64:$VC,79:$VD,80:$VE,81:$VF,82:$VG,83:$VH,84:$VI,85:$VJ,86:$VK,87:$VL,88:$VM,89:$VN,90:$VO},o($V31,[2,97]),{31:$Vm1,74:291,75:292,76:[1,293],77:$Vn1},{16:[1,295],63:$VB,64:$VC,79:$VD,80:$VE,81:$VF,82:$VG,83:$VH,84:$VI,85:$VJ,86:$VK,87:$VL,88:$VM,89:$VN,90:$VO},{18:[1,296],63:$VB,64:$VC,79:$VD,80:$VE,81:$VF,82:$VG,83:$VH,84:$VI,85:$VJ,86:$VK,87:$VL,88:$VM,89:$VN,90:$VO},{24:[1,297]},{18:$Vz,31:[1,298]},{62:[1,299]},o($Vg1,[2,79],{63:$VB,64:$VC,79:$VD,80:$VE,81:$VF,82:$VG,83:$VH,84:$VI,85:$VJ,86:$VK,87:$VL,88:$VM,89:$VN,90:$VO}),o($V31,[2,50]),{22:300,29:$Vv,33:301,51:$VT},{12:59,14:$Vb,15:$Vc,19:302,80:$Vd,91:$Ve,92:40,93:$Vf,94:$Vg,95:$Vh,96:$Vi,97:$Vj,98:$Vk,99:$Vl,100:$Vm,101:$Vn,102:$Vo,103:$Vp,104:$Vq,105:$Vr,106:$Vs,107:$Vt,108:$Vu},o($Vc1,[2,72],{63:$VB,64:$VC,79:$VD,80:$VE,81:$VF,82:$VG,83:$VH,84:$VI,85:$VJ,86:$VK,87:$VL,88:$VM,89:$VN,90:$VO}),{13:[1,303],63:$VB,64:$VC,79:$VD,80:$VE,81:$VF,82:$VG,83:$VH,84:$VI,85:$VJ,86:$VK,87:$VL,88:$VM,89:$VN,90:$VO},{13:[1,304],59:$Vh1,63:$VB,64:$VC,79:$VD,80:$VE,81:$VF,82:$VG,83:$VH,84:$VI,85:$VJ,86:$VK,87:$VL,88:$VM,89:$VN,90:$VO},{13:[1,305]},{13:[1,306]},{16:[1,307]},{16:[2,85]},{16:[2,86]},{18:$V41,56:$V51,70:$V61,71:$V71},{13:[1,308]},{31:$Vm1,75:309,76:[1,310],77:$Vn1},{31:[1,311]},{12:59,14:$Vb,15:$Vc,19:312,80:$Vd,91:$Ve,92:40,93:$Vf,94:$Vg,95:$Vh,96:$Vi,97:$Vj,98:$Vk,99:$Vl,100:$Vm,101:$Vn,102:$Vo,103:$Vp,104:$Vq,105:$Vr,106:$Vs,107:$Vt,108:$Vu},{60:[1,313]},{13:[1,314]},{12:59,14:$Vb,15:$Vc,19:315,80:$Vd,91:$Ve,92:40,93:$Vf,94:$Vg,95:$Vh,96:$Vi,97:$Vj,98:$Vk,99:$Vl,100:$Vm,101:$Vn,102:$Vo,103:$Vp,104:$Vq,105:$Vr,106:$Vs,107:$Vt,108:$Vu},{12:59,14:$Vb,15:$Vc,19:316,80:$Vd,91:$Ve,92:40,93:$Vf,94:$Vg,95:$Vh,96:$Vi,97:$Vj,98:$Vk,99:$Vl,100:$Vm,101:$Vn,102:$Vo,103:$Vp,104:$Vq,105:$Vr,106:$Vs,107:$Vt,108:$Vu},o($Vg1,[2,74]),{63:[1,317]},o($V31,[2,51]),o($V31,[2,52]),o($Vc1,[2,71],{63:$VB,64:$VC,79:$VD,80:$VE,81:$VF,82:$VG,83:$VH,84:$VI,85:$VJ,86:$VK,87:$VL,88:$VM,89:$VN,90:$VO}),o($V31,[2,77]),o($Vk1,[2,60]),o($Vk1,[2,61]),o($Vk1,[2,62]),{22:318,29:$Vv},o($V31,[2,90]),{31:[1,319]},{12:59,14:$Vb,15:$Vc,19:320,80:$Vd,91:$Ve,92:40,93:$Vf,94:$Vg,95:$Vh,96:$Vi,97:$Vj,98:$Vk,99:$Vl,100:$Vm,101:$Vn,102:$Vo,103:$Vp,104:$Vq,105:$Vr,106:$Vs,107:$Vt,108:$Vu},o($V31,[2,92]),{60:[1,321],63:$VB,64:$VC,79:$VD,80:$VE,81:$VF,82:$VG,83:$VH,84:$VI,85:$VJ,86:$VK,87:$VL,88:$VM,89:$VN,90:$VO},{12:104,14:$VP,20:123,27:114,28:112,30:322,32:101,33:102,34:103,35:105,36:106,37:107,38:108,39:109,40:110,41:111,42:113,43:115,44:116,45:117,46:118,47:119,48:$VQ,49:$VR,50:$VS,51:$VT,54:$VU,62:$Va,65:$VV,66:$VW,69:$VX,72:$VY,73:$VZ,78:$V_,109:$V2,110:$V3,111:$V4,112:$V5,113:$V6},o($V31,[2,81]),{16:[1,323],63:$VB,64:$VC,79:$VD,80:$VE,81:$VF,82:$VG,83:$VH,84:$VI,85:$VJ,86:$VK,87:$VL,88:$VM,89:$VN,90:$VO},{25:[1,324],63:$VB,64:$VC,79:$VD,80:$VE,81:$VF,82:$VG,83:$VH,84:$VI,85:$VJ,86:$VK,87:$VL,88:$VM,89:$VN,90:$VO},{20:325,109:$V2,110:$V3,111:$V4,112:$V5,113:$V6},o($V31,[2,87]),o($V31,[2,91]),{60:[1,326],63:$VB,64:$VC,79:$VD,80:$VE,81:$VF,82:$VG,83:$VH,84:$VI,85:$VJ,86:$VK,87:$VL,88:$VM,89:$VN,90:$VO},{12:104,14:$VP,20:123,27:114,28:112,30:327,32:101,33:102,34:103,35:105,36:106,37:107,38:108,39:109,40:110,41:111,42:113,43:115,44:116,45:117,46:118,47:119,48:$VQ,49:$VR,50:$VS,51:$VT,54:$VU,62:$Va,65:$VV,66:$VW,69:$VX,72:$VY,73:$VZ,78:$V_,109:$V2,110:$V3,111:$V4,112:$V5,113:$V6},{12:104,14:$VP,20:123,27:114,28:112,31:[2,95],32:167,33:102,34:103,35:105,36:106,37:107,38:108,39:109,40:110,41:111,42:113,43:115,44:116,45:117,46:118,47:119,48:$VQ,49:$VR,50:$VS,51:$VT,54:$VU,62:$Va,65:$VV,66:$VW,69:$VX,72:$VY,73:$VZ,78:$V_,109:$V2,110:$V3,111:$V4,112:$V5,113:$V6},{13:[1,328]},o($Vg1,[2,73]),{64:[1,329]},{12:104,14:$VP,20:123,27:114,28:112,30:330,32:101,33:102,34:103,35:105,36:106,37:107,38:108,39:109,40:110,41:111,42:113,43:115,44:116,45:117,46:118,47:119,48:$VQ,49:$VR,50:$VS,51:$VT,54:$VU,62:$Va,65:$VV,66:$VW,69:$VX,72:$VY,73:$VZ,78:$V_,109:$V2,110:$V3,111:$V4,112:$V5,113:$V6},o($Vo1,[2,94],{33:102,34:103,12:104,35:105,36:106,37:107,38:108,39:109,40:110,41:111,28:112,42:113,27:114,43:115,44:116,45:117,46:118,47:119,20:123,32:167,14:$VP,48:$VQ,49:$VR,50:$VS,51:$VT,54:$VU,62:$Va,65:$VV,66:$VW,69:$VX,72:$VY,73:$VZ,78:$V_,109:$V2,110:$V3,111:$V4,112:$V5,113:$V6}),o($V31,[2,82]),o($Vg1,[2,78]),o($Vo1,[2,93],{33:102,34:103,12:104,35:105,36:106,37:107,38:108,39:109,40:110,41:111,28:112,42:113,27:114,43:115,44:116,45:117,46:118,47:119,20:123,32:167,14:$VP,48:$VQ,49:$VR,50:$VS,51:$VT,54:$VU,62:$Va,65:$VV,66:$VW,69:$VX,72:$VY,73:$VZ,78:$V_,109:$V2,110:$V3,111:$V4,112:$V5,113:$V6})],
defaultActions: {15:[2,1],28:[2,14],287:[2,85],288:[2,86]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

    const { Statement } = require('./instrucciones/statement');
    const { IfInstruccion } = require('./instrucciones/if-instruccion');
    const { ForInstruccion } = require('./instrucciones/for-instruccion');
    const { SwitchInstruccion } = require('./instrucciones/switch-instruccion');
    const { CaseInstruccion } = require('./instrucciones/case-instruccion');
    const { Llamada } = require('./instrucciones/llamada-instruccion');
    const { WriteLine } = require('./instrucciones/writeline');
    const { WhileInstruccion } = require('./instrucciones/while-instruccion');
    const { DoWhileInstruccion } = require('./instrucciones/do-while-instruccion');
    const { FuncionInstruccion } = require('./instrucciones/funcion-instruccion');
    const { MetodoInstruccion } = require('./instrucciones/declaracion-metodo');
    const { Declaracion } = require('./instrucciones/declaracion');
    const { Asignacion } = require('./instrucciones/asignacion');
    const { AsignacionMultiple } = require('./instrucciones/asignacion-multiple');
    const { Ternario } = require('./instrucciones/ternario');
    const { Casteo } = require('./instrucciones/casteo');
    const { DeclaracionVector } = require('./instrucciones/declaracion-vector');
    const { AsignacionVector } = require('./instrucciones/asignacion-vector');
    const { Actualizacion, OpcionActualizacion } = require('./instrucciones/actualizacion');
    const { DeclaracionMultiple } = require('./instrucciones/declaracion-multiple');
    const { DeclaracionDynamic } = require("./instrucciones/declaracion-dynamic");
    const { AppendInstruccion } = require("./instrucciones/append");
    const { SetValue } = require("./instrucciones/setValue");
    const { StartWith } = require("./instrucciones/startWith");
    const { Break } = require("./instrucciones/break");
    const { Continue } = require("./instrucciones/continue");
    const { Return } = require("./instrucciones/return");

    const { Aritmetica, OperacionAritmetica } = require('./Expresiones/aritmetica');
    const { Relacional, OpcionRelacional } = require('./Expresiones/relacional');
    const { Literal } = require('./Expresiones/literal');
    const { Acceso } = require('./Expresiones/acceso');
    const { ExpresionLogica, OperadoresLogicos } = require('./Expresiones/logica');
    const { AccesoVector } = require("./Expresiones/acceso-vector");
    const { GetValue } = require("./Expresiones/getValue");
    const { ToLower } = require("./Expresiones/toLower");
    const { ToUpper } = require("./Expresiones/toUpper");
    const { Length } = require("./Expresiones/length");
    const { Truncate } = require("./Expresiones/truncate");
    const { Round } = require("./Expresiones/round");
    const { TypeOf } = require("./Expresiones/typeof");
    const { ToString } = require("./Expresiones/toString");
    const { ToCharArray } = require("./Expresiones/toCharArray");

    const { Tipo } = require('./abstractas/retorno');

    
    const { Error_ } = require('./Error/error');

    let errores = new Array();
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* Ignorar espacios en blanco */
break;
case 1: /* ignorar */ 
break;
case 2: /* ignorar */ 
break;
case 3:return "int"
break;
case 4:return "double"
break;
case 5:return "boolean"
break;
case 6:return "char"
break;
case 7:return "string"
break;
case 8:return "if"
break;
case 9:return "else"
break;
case 10:return "switch"
break;
case 11:return "case"
break;
case 12:return "default"
break;
case 13:return "break"
break;
case 14:return "while"
break;
case 15:return "for"
break;
case 16:return "do"
break;
case 17:return "continue"
break;
case 18:return "return"
break;
case 19:return "void"
break;
case 20:return "writeline"
break;
case 21:return "tolower"
break;
case 22:return "toupper"
break;
case 23:return "length"
break;
case 24:return "truncate"
break;
case 25:return "round"
break;
case 26:return "typeof"
break;
case 27:return "tostring"
break;
case 28:return "tochararray"
break;
case 29:return "start"
break;
case 30:return "with"
break;
case 31:return "true"
break;
case 32:return "false"
break;
case 33:return "dynamiclist"
break;
case 34:return "new"
break;
case 35:return "append"
break;
case 36:return "getvalue"
break;
case 37:return "setvalue"
break;
case 38:return "null"
break;
case 39:return "{"
break;
case 40:return "}"
break;
case 41:return "("
break;
case 42:return ")"
break;
case 43:return "["
break;
case 44:return "]"
break;
case 45:return "++"
break;
case 46:return "+"
break;
case 47:return "--"
break;
case 48:return "-"
break;
case 49:return "*"
break;
case 50:return "/"
break;
case 51:return "^"
break;
case 52:return "%"
break;
case 53:return "=="
break;
case 54:return "!="
break;
case 55:return "<="
break;
case 56:return ">="
break;
case 57:return "<"
break;
case 58:return ">"
break;
case 59:return "="
break;
case 60:return "?"
break;
case 61:return "&&"
break;
case 62:return "||"
break;
case 63:return "!"
break;
case 64:return ":"
break;
case 65:return ","
break;
case 66:return ";"
break;
case 67:return "decimal"
break;
case 68:return "numero"
break;
case 69:return "id"
break;
case 70:return "cadena"
break;
case 71:return "caracter"
break;
case 72:return "EOF"
break;
case 73:
                errores.push(new Error_(yy_.yylloc.first_line, yy_.yylloc.first_column, 'Lexico', yy_.yytext));
            
break;
}
},
rules: [/^(?:\s+)/i,/^(?:((\/\/.*)))/i,/^(?:((\/\*([^*]|[\r\n]|(\*+([^*/]|[\r\n])))*\*\/)))/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:boolean\b)/i,/^(?:char\b)/i,/^(?:string\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:break\b)/i,/^(?:while\b)/i,/^(?:for\b)/i,/^(?:do\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:void\b)/i,/^(?:writeline\b)/i,/^(?:tolower\b)/i,/^(?:toupper\b)/i,/^(?:length\b)/i,/^(?:truncate\b)/i,/^(?:round\b)/i,/^(?:typeof\b)/i,/^(?:tostring\b)/i,/^(?:tochararray\b)/i,/^(?:start\b)/i,/^(?:with\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:dynamiclist\b)/i,/^(?:new\b)/i,/^(?:append\b)/i,/^(?:getvalue\b)/i,/^(?:setvalue\b)/i,/^(?:null\b)/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\()/i,/^(?:\))/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\+\+)/i,/^(?:\+)/i,/^(?:--)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:\^)/i,/^(?:%)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:<)/i,/^(?:>)/i,/^(?:=)/i,/^(?:\?)/i,/^(?:&&)/i,/^(?:\|\|)/i,/^(?:!)/i,/^(?::)/i,/^(?:,)/i,/^(?:;)/i,/^(?:(([0-9]+)\.([0-9]+)))/i,/^(?:([0-9]+))/i,/^(?:(([a-zA-Z_])[a-zA-Z0-9_ñÑ]*))/i,/^(?:(("[^"]*")))/i,/^(?:(('[^']')))/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}