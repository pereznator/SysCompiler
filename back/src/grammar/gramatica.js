/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,7],$V1=[1,9],$V2=[1,10],$V3=[1,11],$V4=[1,12],$V5=[1,13],$V6=[1,14],$V7=[5,10,23,102,103,104,105,106],$V8=[13,15,52,57],$V9=[1,24],$Va=[1,43],$Vb=[1,53],$Vc=[1,33],$Vd=[1,34],$Ve=[1,36],$Vf=[1,37],$Vg=[1,38],$Vh=[1,39],$Vi=[1,40],$Vj=[1,41],$Vk=[1,42],$Vl=[1,44],$Vm=[1,45],$Vn=[1,46],$Vo=[1,47],$Vp=[1,48],$Vq=[1,49],$Vr=[1,50],$Vs=[1,51],$Vt=[1,52],$Vu=[1,55],$Vv=[1,57],$Vw=[1,63],$Vx=[15,18,26],$Vy=[1,70],$Vz=[1,72],$VA=[1,64],$VB=[1,65],$VC=[1,66],$VD=[1,67],$VE=[1,68],$VF=[1,69],$VG=[1,71],$VH=[1,73],$VI=[1,74],$VJ=[1,75],$VK=[1,76],$VL=[1,77],$VM=[15,16,18,26,50,51,53,56,57,72,73,74,75,76,77,78,79,80,81,82,83],$VN=[2,110],$VO=[1,80],$VP=[1,111],$VQ=[1,109],$VR=[1,110],$VS=[1,117],$VT=[1,118],$VU=[1,119],$VV=[1,113],$VW=[1,114],$VX=[1,116],$VY=[1,115],$VZ=[15,18],$V_=[5,10,13,15,16,23,26,42,45,55,58,59,62,65,66,69,70,71,102,103,104,105,106],$V$=[15,16,18,26,50,51,53,56,57,72,73,78,79,80,81,82,83],$V01=[15,16,18,26,50,51,53,82,83],$V11=[5,10,13,23,26,42,44,45,55,58,59,62,65,66,69,70,71,102,103,104,105,106],$V21=[13,26,42,45,55,58,59,62,65,66,69,70,71,102,103,104,105,106],$V31=[1,158],$V41=[1,157],$V51=[1,159],$V61=[1,160],$V71=[15,16,18,26,50,51,53,56,57,72,73,74,75,78,79,80,81,82,83],$V81=[15,16,18,26,50,51,53,56,57,78,79,80,81,82,83],$V91=[1,187],$Va1=[1,188],$Vb1=[1,190],$Vc1=[15,16],$Vd1=[2,42],$Ve1=[1,192],$Vf1=[1,193],$Vg1=[1,209],$Vh1=[1,212],$Vi1=[16,18,47],$Vj1=[26,69,70];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INIT":3,"INSTRUCCIONES":4,"EOF":5,"INSTRUCCION":6,"STRTWITH":7,"DECFUNCION":8,"DECMETODO":9,"start":10,"with":11,"LLAMADA":12,"id":13,"(":14,")":15,";":16,"LISTAEXPRESIONES":17,",":18,"EXPRESION":19,"TIPOSDATOS":20,"STATEMENT":21,"DEFPARAMETROS":22,"void":23,"{":24,"CONTENIDO":25,"}":26,"SEGMENTO":27,"INSIF":28,"INSWHILE":29,"INSDECLARACION":30,"INSFOR":31,"INSDOWHILE":32,"INSWRITELINE":33,"INSSWITCH":34,"ASIGNACION":35,"ACTUALIZACION":36,"DECVECTOR":37,"ASIGNACIONVECTOR":38,"DECDYNAMICLIST":39,"APPEND":40,"SETVALUE":41,"if":42,"INSELSE":43,"else":44,"while":45,"LISTAIDS":46,"=":47,"TERNARIO":48,"CASTEO":49,"?":50,":":51,"[":52,"]":53,"new":54,"dynamiclist":55,"<":56,">":57,"append":58,"setvalue":59,"FORINICIO":60,"FORFINAL":61,"for":62,"++":63,"--":64,"do":65,"switch":66,"INSCASES":67,"INSDEFAULT":68,"case":69,"default":70,"writeline":71,"+":72,"-":73,"*":74,"/":75,"^":76,"%":77,"<=":78,">=":79,"==":80,"!=":81,"&&":82,"||":83,"!":84,"VALOR":85,"numero":86,"decimal":87,"cadena":88,"caracter":89,"true":90,"false":91,"null":92,"getvalue":93,"tolower":94,"toupper":95,"length":96,"truncate":97,"round":98,"typeof":99,"tostring":100,"tochararray":101,"string":102,"int":103,"double":104,"boolean":105,"char":106,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",10:"start",11:"with",13:"id",14:"(",15:")",16:";",18:",",23:"void",24:"{",26:"}",42:"if",44:"else",45:"while",47:"=",50:"?",51:":",52:"[",53:"]",54:"new",55:"dynamiclist",56:"<",57:">",58:"append",59:"setvalue",62:"for",63:"++",64:"--",65:"do",66:"switch",69:"case",70:"default",71:"writeline",72:"+",73:"-",74:"*",75:"/",76:"^",77:"%",78:"<=",79:">=",80:"==",81:"!=",82:"&&",83:"||",84:"!",86:"numero",87:"decimal",88:"cadena",89:"caracter",90:"true",91:"false",92:"null",93:"getvalue",94:"tolower",95:"toupper",96:"length",97:"truncate",98:"round",99:"typeof",100:"tostring",101:"tochararray",102:"string",103:"int",104:"double",105:"boolean",106:"char"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,1],[7,3],[12,4],[12,5],[17,3],[17,1],[8,5],[8,6],[9,5],[9,6],[22,4],[22,2],[21,3],[21,2],[25,2],[25,1],[27,1],[27,1],[27,1],[27,2],[27,1],[27,1],[27,1],[27,1],[27,2],[27,2],[27,1],[27,1],[27,1],[27,1],[27,1],[28,6],[43,2],[43,2],[43,0],[29,5],[30,2],[30,4],[30,4],[30,4],[30,4],[30,6],[30,6],[30,6],[30,4],[30,6],[46,3],[46,1],[35,3],[35,3],[35,3],[35,3],[35,5],[35,5],[35,5],[35,5],[48,5],[49,4],[37,11],[37,9],[37,5],[38,7],[39,12],[39,8],[40,7],[41,9],[60,1],[60,1],[61,1],[61,1],[31,9],[36,2],[36,2],[32,7],[34,8],[67,5],[67,4],[68,3],[68,0],[33,5],[19,3],[19,3],[19,3],[19,3],[19,3],[19,3],[19,2],[19,3],[19,3],[19,3],[19,3],[19,3],[19,3],[19,3],[19,3],[19,2],[19,1],[85,1],[85,1],[85,1],[85,1],[85,1],[85,1],[85,1],[85,1],[85,4],[85,6],[85,4],[85,4],[85,4],[85,4],[85,4],[85,4],[85,4],[85,4],[85,3],[20,1],[20,1],[20,1],[20,1],[20,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

        return $$[$0-1];
    
break;
case 2: case 20:

        $$[$0-1].push($$[$0]);
        this.$ = $$[$0-1];
    
break;
case 3: case 11: case 21: case 53:

        this.$ = [$$[$0]];
    
break;
case 4: case 5: case 6: case 38: case 39: case 74: case 75: case 102:

        this.$ = $$[$0];
    
break;
case 7:

        this.$ = new StartWith($$[$0], _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 8:

        this.$ = new Llamada($$[$0-3], new Array(), _$[$0-3].first_line, _$[$0-3].first_column);
    
break;
case 9:

        this.$ = new Llamada($$[$0-4], $$[$0-2], _$[$0-4].first_line, _$[$0-4].first_column);
    
break;
case 10: case 52:

        $$[$0-2].push($$[$0]);
        this.$ = $$[$0-2];
    
break;
case 12:

        this.$ = new FuncionInstruccion($$[$0-3], $$[$0], new Array(), $$[$0-4], _$[$0-4].first_line, _$[$0-4].first_column);
    
break;
case 13:

        this.$ = new FuncionInstruccion($$[$0-4], $$[$0], $$[$0-2], $$[$0-5], _$[$0-5].first_line, _$[$0-5].first_column);
    
break;
case 14:

        this.$ = new MetodoInstruccion($$[$0-3], $$[$0], null, _$[$0-4].first_line, _$[$0-4].first_column);
    
break;
case 15:

        this.$ = new MetodoInstruccion($$[$0-4], $$[$0], $$[$0-2], _$[$0-5].first_line, _$[$0-5].first_column);
    
break;
case 16:

        $$[$0-3].push(new Declaracion($$[$0-1], $$[$0], null, _$[$0-3].first_line, _$[$0-3].first_column));
        this.$ = $$[$0-3];
    
break;
case 17:

        this.$ = [new Declaracion($$[$0-1], $$[$0], null, _$[$0-1].first_line, _$[$0-1].first_column)];
    
break;
case 18:

        this.$ = new Statement($$[$0-1], _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 19:

        this.$ = new Statement(new Array(), _$[$0-1].first_line, _$[$0-1].first_column);
    
break;
case 37:

        this.$ = new IfInstruccion($$[$0-3], $$[$0-1], $$[$0], _$[$0-5].first_line, _$[$0-5].first_column);
    
break;
case 40: case 84:

        this.$ = null;
    
break;
case 41:

        this.$ = new WhileInstruccion($$[$0-2], $$[$0], _$[$0-4].first_line, _$[$0-4].first_column);
    
break;
case 42:

        this.$ = new Declaracion($$[$0-1], $$[$0], null, _$[$0-1].first_line, _$[$0-1].first_column);
    
break;
case 43:

        $$[$0].push($$[$0-2]);
        this.$ = new DeclaracionMultiple($$[$0-3], $$[$0], null, _$[$0-3].first_line, _$[$0-3].first_column);
    
break;
case 44: case 45: case 46: case 50:

        this.$ = new Declaracion($$[$0-3], $$[$0-2], $$[$0], _$[$0-3].first_line, _$[$0-3].first_column);
    
break;
case 47: case 48: case 49: case 51:

        $$[$0-2].push($$[$0-4]);
        this.$ = new DeclaracionMultiple($$[$0-5], $$[$0-2], $$[$0], _$[$0-5].first_line, _$[$0-5].first_column);
    
break;
case 54: case 55: case 56: case 57:

        this.$ = new Asignacion(null, $$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 58: case 59: case 60: case 61:

        $$[$0-2].push($$[$0-4]);
        this.$ = new AsignacionMultiple($$[$0-2], $$[$0], _$[$0-4].first_line, _$[$0-4].first_column);
    
break;
case 62:

        this.$ = new Ternario($$[$0-4], $$[$0-2], $$[$0], _$[$0-4].first_line, _$[$0-4].first_column);
    
break;
case 63:

        this.$ = new Casteo($$[$0-2], $$[$0], _$[$0-3].first_line, _$[$0-3].first_column);
    
break;
case 64:

        this.$ = new DeclaracionVector($$[$0-10], $$[$0-9], $$[$0-2], null, _$[$0-10].first_line, _$[$0-10].first_column);
    
break;
case 65:

        this.$ = new DeclaracionVector($$[$0-8], $$[$0-7], null, $$[$0-2], _$[$0-8].first_line, _$[$0-8].first_column);
    
break;
case 66:

        this.$ = new DeclaracionVector($$[$0-4], $$[$0-3], null, null, _$[$0-4].first_line, _$[$0-4].first_column);
    
break;
case 67:

        this.$ = new AsignacionVector($$[$0-6], $$[$0-4], $$[$0-1], _$[$0-6].first_line, _$[$0-6].first_column);
    
break;
case 68:

        this.$ = new DeclaracionDynamic($$[$0-9], $$[$0-2], $$[$0-7], null, _$[$0-11].first_line, _$[$0-11].first_column);
    
break;
case 69:

        this.$ = new DeclaracionDynamic($$[$0-5], null, $$[$0-3], $$[$0-1], _$[$0-7].first_line, _$[$0-7].first_column);
    
break;
case 70:

        this.$ = new AppendInstruccion($$[$0-4], $$[$0-2], _$[$0-6].first_line, _$[$0-6].first_column);
    
break;
case 71:

        this.$ = new SetValue($$[$0-6], $$[$0-4], $$[$0-2], _$[$0-8].first_line, _$[$0-8].first_column);
    
break;
case 72: case 73:

        this.$ = $$[$0]
    
break;
case 76:

        this.$ = new ForInstruccion($$[$0-6], $$[$0-4], $$[$0-2], $$[$0], _$[$0-8].first_line, _$[$0-8].first_column);
    
break;
case 77:

        this.$ = new Actualizacion($$[$0-1], OpcionActualizacion.MASMAS, _$[$0-1].first_line, _$[$0-1].first_column);
    
break;
case 78:

        this.$ = new Actualizacion($$[$0-1], OpcionActualizacion.MENOSMENOS, _$[$0-1].first_line, _$[$0-1].first_column);
    
break;
case 79:

        this.$ = new DoWhileInstruccion($$[$0-2], $$[$0-5], _$[$0-6].first_line, _$[$0-6].first_column);
    
break;
case 80:

        this.$ = new SwitchInstruccion($$[$0-5], $$[$0-2], $$[$0-1], _$[$0-7].first_line, _$[$0-7].first_column);
    
break;
case 81:

        $$[$0-4].push(new CaseInstruccion($$[$0-2], $$[$0], _$[$0-4].first_line, _$[$0-4].first_column));
        this.$ = $$[$0-4];
    
break;
case 82:

        this.$ = [new CaseInstruccion($$[$0-2], $$[$0], _$[$0-3].first_line, _$[$0-3].first_column)];
    
break;
case 83:

        this.$ = new Statement($$[$0], _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 85:

        this.$ = new WriteLine($$[$0-2], _$[$0-4].first_line, _$[$0-4].first_column);
    
break;
case 86:

        this.$ = new Aritmetica($$[$0-2], $$[$0], OperacionAritmetica.SUMA, _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 87:

        this.$ = new Aritmetica($$[$0-2], $$[$0], OperacionAritmetica.RESTA, _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 88:

        this.$ = new Aritmetica($$[$0-2], $$[$0], OperacionAritmetica.MULTI, _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 89:

        this.$ = new Aritmetica($$[$0-2], $$[$0], OperacionAritmetica.DIV, _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 90:

        this.$ = new Aritmetica($$[$0-2], $$[$0], OperacionAritmetica.POT, _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 91:

        this.$ = new Aritmetica($$[$0-2], $$[$0], OperacionAritmetica.MOD, _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 92:

        this.$ = new Aritmetica(null, $$[$0], OperacionAritmetica.NEG, _$[$0-1].first_line, _$[$0-1].first_column);
    
break;
case 93:

        this.$ = new Relacional($$[$0-2], $$[$0], OpcionRelacional.MENOR, _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 94:

        this.$ = new Relacional($$[$0-2], $$[$0], OpcionRelacional.MENORIGUAL, _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 95:

        this.$ = new Relacional($$[$0-2], $$[$0], OpcionRelacional.MAYOR, _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 96:

        this.$ = new Relacional($$[$0-2], $$[$0], OpcionRelacional.MAYORIGUAL, _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 97:

        this.$ = new Relacional($$[$0-2], $$[$0], OpcionRelacional.IGUAL, _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 98:

        this.$ = new Relacional($$[$0-2], $$[$0], OpcionRelacional.DESIGUAL, _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 99:

        this.$ = new ExpresionLogica($$[$0-2], $$[$0], OperadoresLogicos.AND, _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 100:

        this.$ = new ExpresionLogica($$[$0-2], $$[$0], OperadoresLogicos.OR, _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 101:

        this.$ = new ExpresionLogica($$[$0], null, OperadoresLogicos.NOT, _$[$0-1].first_line, _$[$0-1].first_column);
    
break;
case 103:

        this.$ = new Literal($$[$0], _$[$0].first_line, _$[$0].first_column, Tipo.INT);
    
break;
case 104:

        this.$ = new Literal($$[$0], _$[$0].first_line, _$[$0].first_column, Tipo.DOUBLE);
    
break;
case 105:

        this.$ = new Literal($$[$0], _$[$0].first_line, _$[$0].first_column, Tipo.STRING);
    
break;
case 106:

        this.$ = new Literal($$[$0], _$[$0].first_line, _$[$0].first_column, Tipo.CHAR);
    
break;
case 107: case 108:

        this.$ = new Literal($$[$0], _$[$0].first_line, _$[$0].first_column, Tipo.BOOLEAN);
    
break;
case 109:

        this.$ = new Literal($$[$0], _$[$0].first_line, _$[$0].first_column, null);
    
break;
case 110:

        this.$ = new Acceso($$[$0], _$[$0].first_line, _$[$0].first_column);
    
break;
case 111:

        this.$ = new AccesoVector($$[$0-3], $$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column);
    
break;
case 112:

        this.$ = new GetValue($$[$0-3], $$[$0-1], _$[$0-5].first_line, _$[$0-5].first_column);
    
break;
case 113:

        this.$ = new ToLower($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column);
    
break;
case 114:

        this.$ = new ToUpper($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column);
    
break;
case 115:

        this.$ = new Length($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column);
    
break;
case 116:

        this.$ = new Truncate($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column);
    
break;
case 117:

        this.$ = new Round($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column);
    
break;
case 118:

        this.$ = new TypeOf($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column);
    
break;
case 119:

        this.$ = new ToString($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column);
    
break;
case 120:

        this.$ = new ToCharArray($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column);
    
break;
case 121:

        this.$ = $$[$0-1];
    
break;
case 122:

        this.$ = Tipo.STRING;
    
break;
case 123:

        this.$ = Tipo.INT;
    
break;
case 124:

        this.$ = Tipo.DOUBLE;
    
break;
case 125:

        this.$ = Tipo.BOOLEAN;
    
break;
case 126:

        this.$ = Tipo.CHAR;
    
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:5,9:6,10:$V0,20:8,23:$V1,102:$V2,103:$V3,104:$V4,105:$V5,106:$V6},{1:[3]},{5:[1,15],6:16,7:4,8:5,9:6,10:$V0,20:8,23:$V1,102:$V2,103:$V3,104:$V4,105:$V5,106:$V6},o($V7,[2,3]),o($V7,[2,4]),o($V7,[2,5]),o($V7,[2,6]),{11:[1,17]},{13:[1,18]},{13:[1,19]},o($V8,[2,122]),o($V8,[2,123]),o($V8,[2,124]),o($V8,[2,125]),o($V8,[2,126]),{1:[2,1]},o($V7,[2,2]),{12:20,13:[1,21]},{14:[1,22]},{14:[1,23]},o($V7,[2,7]),{14:$V9},{15:[1,25],20:27,22:26,102:$V2,103:$V3,104:$V4,105:$V5,106:$V6},{15:[1,28],20:27,22:29,102:$V2,103:$V3,104:$V4,105:$V5,106:$V6},{13:$Va,14:$Vb,15:[1,30],17:31,19:32,73:$Vc,84:$Vd,85:35,86:$Ve,87:$Vf,88:$Vg,89:$Vh,90:$Vi,91:$Vj,92:$Vk,93:$Vl,94:$Vm,95:$Vn,96:$Vo,97:$Vp,98:$Vq,99:$Vr,100:$Vs,101:$Vt},{21:54,24:$Vu},{15:[1,56],18:$Vv},{13:[1,58]},{21:59,24:$Vu},{15:[1,60],18:$Vv},{16:[1,61]},{15:[1,62],18:$Vw},o($Vx,[2,11],{56:$Vy,57:$Vz,72:$VA,73:$VB,74:$VC,75:$VD,76:$VE,77:$VF,78:$VG,79:$VH,80:$VI,81:$VJ,82:$VK,83:$VL}),{13:$Va,14:$Vb,19:78,73:$Vc,84:$Vd,85:35,86:$Ve,87:$Vf,88:$Vg,89:$Vh,90:$Vi,91:$Vj,92:$Vk,93:$Vl,94:$Vm,95:$Vn,96:$Vo,97:$Vp,98:$Vq,99:$Vr,100:$Vs,101:$Vt},{13:$Va,14:$Vb,19:79,73:$Vc,84:$Vd,85:35,86:$Ve,87:$Vf,88:$Vg,89:$Vh,90:$Vi,91:$Vj,92:$Vk,93:$Vl,94:$Vm,95:$Vn,96:$Vo,97:$Vp,98:$Vq,99:$Vr,100:$Vs,101:$Vt},o($VM,[2,102]),o($VM,[2,103]),o($VM,[2,104]),o($VM,[2,105]),o($VM,[2,106]),o($VM,[2,107]),o($VM,[2,108]),o($VM,[2,109]),o($VM,$VN,{52:$VO}),{14:[1,81]},{14:[1,82]},{14:[1,83]},{14:[1,84]},{14:[1,85]},{14:[1,86]},{14:[1,87]},{14:[1,88]},{14:[1,89]},{13:$Va,14:$Vb,19:90,73:$Vc,84:$Vd,85:35,86:$Ve,87:$Vf,88:$Vg,89:$Vh,90:$Vi,91:$Vj,92:$Vk,93:$Vl,94:$Vm,95:$Vn,96:$Vo,97:$Vp,98:$Vq,99:$Vr,100:$Vs,101:$Vt},o($V7,[2,12]),{12:96,13:$VP,20:112,25:91,26:[1,92],27:93,28:94,29:95,30:97,31:98,32:99,33:100,34:101,35:102,36:103,37:104,38:105,39:106,40:107,41:108,42:$VQ,45:$VR,55:$VS,58:$VT,59:$VU,62:$VV,65:$VW,66:$VX,71:$VY,102:$V2,103:$V3,104:$V4,105:$V5,106:$V6},{21:120,24:$Vu},{20:121,102:$V2,103:$V3,104:$V4,105:$V5,106:$V6},o($VZ,[2,17]),o($V7,[2,14]),{21:122,24:$Vu},o($V_,[2,8]),{16:[1,123]},{13:$Va,14:$Vb,19:124,73:$Vc,84:$Vd,85:35,86:$Ve,87:$Vf,88:$Vg,89:$Vh,90:$Vi,91:$Vj,92:$Vk,93:$Vl,94:$Vm,95:$Vn,96:$Vo,97:$Vp,98:$Vq,99:$Vr,100:$Vs,101:$Vt},{13:$Va,14:$Vb,19:125,73:$Vc,84:$Vd,85:35,86:$Ve,87:$Vf,88:$Vg,89:$Vh,90:$Vi,91:$Vj,92:$Vk,93:$Vl,94:$Vm,95:$Vn,96:$Vo,97:$Vp,98:$Vq,99:$Vr,100:$Vs,101:$Vt},{13:$Va,14:$Vb,19:126,73:$Vc,84:$Vd,85:35,86:$Ve,87:$Vf,88:$Vg,89:$Vh,90:$Vi,91:$Vj,92:$Vk,93:$Vl,94:$Vm,95:$Vn,96:$Vo,97:$Vp,98:$Vq,99:$Vr,100:$Vs,101:$Vt},{13:$Va,14:$Vb,19:127,73:$Vc,84:$Vd,85:35,86:$Ve,87:$Vf,88:$Vg,89:$Vh,90:$Vi,91:$Vj,92:$Vk,93:$Vl,94:$Vm,95:$Vn,96:$Vo,97:$Vp,98:$Vq,99:$Vr,100:$Vs,101:$Vt},{13:$Va,14:$Vb,19:128,73:$Vc,84:$Vd,85:35,86:$Ve,87:$Vf,88:$Vg,89:$Vh,90:$Vi,91:$Vj,92:$Vk,93:$Vl,94:$Vm,95:$Vn,96:$Vo,97:$Vp,98:$Vq,99:$Vr,100:$Vs,101:$Vt},{13:$Va,14:$Vb,19:129,73:$Vc,84:$Vd,85:35,86:$Ve,87:$Vf,88:$Vg,89:$Vh,90:$Vi,91:$Vj,92:$Vk,93:$Vl,94:$Vm,95:$Vn,96:$Vo,97:$Vp,98:$Vq,99:$Vr,100:$Vs,101:$Vt},{13:$Va,14:$Vb,19:130,73:$Vc,84:$Vd,85:35,86:$Ve,87:$Vf,88:$Vg,89:$Vh,90:$Vi,91:$Vj,92:$Vk,93:$Vl,94:$Vm,95:$Vn,96:$Vo,97:$Vp,98:$Vq,99:$Vr,100:$Vs,101:$Vt},{13:$Va,14:$Vb,19:131,73:$Vc,84:$Vd,85:35,86:$Ve,87:$Vf,88:$Vg,89:$Vh,90:$Vi,91:$Vj,92:$Vk,93:$Vl,94:$Vm,95:$Vn,96:$Vo,97:$Vp,98:$Vq,99:$Vr,100:$Vs,101:$Vt},{13:$Va,14:$Vb,19:132,73:$Vc,84:$Vd,85:35,86:$Ve,87:$Vf,88:$Vg,89:$Vh,90:$Vi,91:$Vj,92:$Vk,93:$Vl,94:$Vm,95:$Vn,96:$Vo,97:$Vp,98:$Vq,99:$Vr,100:$Vs,101:$Vt},{13:$Va,14:$Vb,19:133,73:$Vc,84:$Vd,85:35,86:$Ve,87:$Vf,88:$Vg,89:$Vh,90:$Vi,91:$Vj,92:$Vk,93:$Vl,94:$Vm,95:$Vn,96:$Vo,97:$Vp,98:$Vq,99:$Vr,100:$Vs,101:$Vt},{13:$Va,14:$Vb,19:134,73:$Vc,84:$Vd,85:35,86:$Ve,87:$Vf,88:$Vg,89:$Vh,90:$Vi,91:$Vj,92:$Vk,93:$Vl,94:$Vm,95:$Vn,96:$Vo,97:$Vp,98:$Vq,99:$Vr,100:$Vs,101:$Vt},{13:$Va,14:$Vb,19:135,73:$Vc,84:$Vd,85:35,86:$Ve,87:$Vf,88:$Vg,89:$Vh,90:$Vi,91:$Vj,92:$Vk,93:$Vl,94:$Vm,95:$Vn,96:$Vo,97:$Vp,98:$Vq,99:$Vr,100:$Vs,101:$Vt},{13:$Va,14:$Vb,19:136,73:$Vc,84:$Vd,85:35,86:$Ve,87:$Vf,88:$Vg,89:$Vh,90:$Vi,91:$Vj,92:$Vk,93:$Vl,94:$Vm,95:$Vn,96:$Vo,97:$Vp,98:$Vq,99:$Vr,100:$Vs,101:$Vt},{13:$Va,14:$Vb,19:137,73:$Vc,84:$Vd,85:35,86:$Ve,87:$Vf,88:$Vg,89:$Vh,90:$Vi,91:$Vj,92:$Vk,93:$Vl,94:$Vm,95:$Vn,96:$Vo,97:$Vp,98:$Vq,99:$Vr,100:$Vs,101:$Vt},{13:$Va,14:$Vb,19:138,73:$Vc,84:$Vd,85:35,86:$Ve,87:$Vf,88:$Vg,89:$Vh,90:$Vi,91:$Vj,92:$Vk,93:$Vl,94:$Vm,95:$Vn,96:$Vo,97:$Vp,98:$Vq,99:$Vr,100:$Vs,101:$Vt},o($V$,[2,92],{74:$VC,75:$VD,76:$VE,77:$VF}),o($V01,[2,101],{56:$Vy,57:$Vz,72:$VA,73:$VB,74:$VC,75:$VD,76:$VE,77:$VF,78:$VG,79:$VH,80:$VI,81:$VJ}),{13:$Va,14:$Vb,19:139,73:$Vc,84:$Vd,85:35,86:$Ve,87:$Vf,88:$Vg,89:$Vh,90:$Vi,91:$Vj,92:$Vk,93:$Vl,94:$Vm,95:$Vn,96:$Vo,97:$Vp,98:$Vq,99:$Vr,100:$Vs,101:$Vt},{13:[1,140]},{13:$Va,14:$Vb,19:141,73:$Vc,84:$Vd,85:35,86:$Ve,87:$Vf,88:$Vg,89:$Vh,90:$Vi,91:$Vj,92:$Vk,93:$Vl,94:$Vm,95:$Vn,96:$Vo,97:$Vp,98:$Vq,99:$Vr,100:$Vs,101:$Vt},{13:$Va,14:$Vb,19:142,73:$Vc,84:$Vd,85:35,86:$Ve,87:$Vf,88:$Vg,89:$Vh,90:$Vi,91:$Vj,92:$Vk,93:$Vl,94:$Vm,95:$Vn,96:$Vo,97:$Vp,98:$Vq,99:$Vr,100:$Vs,101:$Vt},{13:$Va,14:$Vb,19:143,73:$Vc,84:$Vd,85:35,86:$Ve,87:$Vf,88:$Vg,89:$Vh,90:$Vi,91:$Vj,92:$Vk,93:$Vl,94:$Vm,95:$Vn,96:$Vo,97:$Vp,98:$Vq,99:$Vr,100:$Vs,101:$Vt},{13:$Va,14:$Vb,19:144,73:$Vc,84:$Vd,85:35,86:$Ve,87:$Vf,88:$Vg,89:$Vh,90:$Vi,91:$Vj,92:$Vk,93:$Vl,94:$Vm,95:$Vn,96:$Vo,97:$Vp,98:$Vq,99:$Vr,100:$Vs,101:$Vt},{13:$Va,14:$Vb,19:145,73:$Vc,84:$Vd,85:35,86:$Ve,87:$Vf,88:$Vg,89:$Vh,90:$Vi,91:$Vj,92:$Vk,93:$Vl,94:$Vm,95:$Vn,96:$Vo,97:$Vp,98:$Vq,99:$Vr,100:$Vs,101:$Vt},{13:$Va,14:$Vb,19:146,73:$Vc,84:$Vd,85:35,86:$Ve,87:$Vf,88:$Vg,89:$Vh,90:$Vi,91:$Vj,92:$Vk,93:$Vl,94:$Vm,95:$Vn,96:$Vo,97:$Vp,98:$Vq,99:$Vr,100:$Vs,101:$Vt},{13:$Va,14:$Vb,19:147,73:$Vc,84:$Vd,85:35,86:$Ve,87:$Vf,88:$Vg,89:$Vh,90:$Vi,91:$Vj,92:$Vk,93:$Vl,94:$Vm,95:$Vn,96:$Vo,97:$Vp,98:$Vq,99:$Vr,100:$Vs,101:$Vt},{13:$Va,14:$Vb,19:148,73:$Vc,84:$Vd,85:35,86:$Ve,87:$Vf,88:$Vg,89:$Vh,90:$Vi,91:$Vj,92:$Vk,93:$Vl,94:$Vm,95:$Vn,96:$Vo,97:$Vp,98:$Vq,99:$Vr,100:$Vs,101:$Vt},{15:[1,149],56:$Vy,57:$Vz,72:$VA,73:$VB,74:$VC,75:$VD,76:$VE,77:$VF,78:$VG,79:$VH,80:$VI,81:$VJ,82:$VK,83:$VL},{12:96,13:$VP,20:112,26:[1,150],27:151,28:94,29:95,30:97,31:98,32:99,33:100,34:101,35:102,36:103,37:104,38:105,39:106,40:107,41:108,42:$VQ,45:$VR,55:$VS,58:$VT,59:$VU,62:$VV,65:$VW,66:$VX,71:$VY,102:$V2,103:$V3,104:$V4,105:$V5,106:$V6},o($V11,[2,19]),o($V21,[2,21]),o($V21,[2,22]),o($V21,[2,23]),o($V21,[2,24]),{16:[1,152]},o($V21,[2,26]),o($V21,[2,27]),o($V21,[2,28]),o($V21,[2,29]),{16:[1,153]},{16:[1,154]},o($V21,[2,32]),o($V21,[2,33]),o($V21,[2,34]),o($V21,[2,35]),o($V21,[2,36]),{14:[1,155]},{14:[1,156]},{14:$V9,18:$V31,47:$V41,52:[1,161],63:$V51,64:$V61},{13:[1,162]},{14:[1,163]},{21:164,24:$Vu},{14:[1,165]},{14:[1,166]},{56:[1,167]},{14:[1,168]},{14:[1,169]},o($V7,[2,13]),{13:[1,170]},o($V7,[2,15]),o($V_,[2,9]),o($Vx,[2,10],{56:$Vy,57:$Vz,72:$VA,73:$VB,74:$VC,75:$VD,76:$VE,77:$VF,78:$VG,79:$VH,80:$VI,81:$VJ,82:$VK,83:$VL}),o($V$,[2,86],{74:$VC,75:$VD,76:$VE,77:$VF}),o($V$,[2,87],{74:$VC,75:$VD,76:$VE,77:$VF}),o($V71,[2,88],{76:$VE,77:$VF}),o($V71,[2,89],{76:$VE,77:$VF}),o($VM,[2,90]),o($VM,[2,91]),o($V81,[2,93],{72:$VA,73:$VB,74:$VC,75:$VD,76:$VE,77:$VF}),o($V81,[2,94],{72:$VA,73:$VB,74:$VC,75:$VD,76:$VE,77:$VF}),o($V81,[2,95],{72:$VA,73:$VB,74:$VC,75:$VD,76:$VE,77:$VF}),o($V81,[2,96],{72:$VA,73:$VB,74:$VC,75:$VD,76:$VE,77:$VF}),o($V81,[2,97],{72:$VA,73:$VB,74:$VC,75:$VD,76:$VE,77:$VF}),o($V81,[2,98],{72:$VA,73:$VB,74:$VC,75:$VD,76:$VE,77:$VF}),o($V01,[2,99],{56:$Vy,57:$Vz,72:$VA,73:$VB,74:$VC,75:$VD,76:$VE,77:$VF,78:$VG,79:$VH,80:$VI,81:$VJ}),o([15,16,18,26,50,51,53,83],[2,100],{56:$Vy,57:$Vz,72:$VA,73:$VB,74:$VC,75:$VD,76:$VE,77:$VF,78:$VG,79:$VH,80:$VI,81:$VJ,82:$VK}),{53:[1,171],56:$Vy,57:$Vz,72:$VA,73:$VB,74:$VC,75:$VD,76:$VE,77:$VF,78:$VG,79:$VH,80:$VI,81:$VJ,82:$VK,83:$VL},{18:[1,172]},{15:[1,173],56:$Vy,57:$Vz,72:$VA,73:$VB,74:$VC,75:$VD,76:$VE,77:$VF,78:$VG,79:$VH,80:$VI,81:$VJ,82:$VK,83:$VL},{15:[1,174],56:$Vy,57:$Vz,72:$VA,73:$VB,74:$VC,75:$VD,76:$VE,77:$VF,78:$VG,79:$VH,80:$VI,81:$VJ,82:$VK,83:$VL},{15:[1,175],56:$Vy,57:$Vz,72:$VA,73:$VB,74:$VC,75:$VD,76:$VE,77:$VF,78:$VG,79:$VH,80:$VI,81:$VJ,82:$VK,83:$VL},{15:[1,176],56:$Vy,57:$Vz,72:$VA,73:$VB,74:$VC,75:$VD,76:$VE,77:$VF,78:$VG,79:$VH,80:$VI,81:$VJ,82:$VK,83:$VL},{15:[1,177],56:$Vy,57:$Vz,72:$VA,73:$VB,74:$VC,75:$VD,76:$VE,77:$VF,78:$VG,79:$VH,80:$VI,81:$VJ,82:$VK,83:$VL},{15:[1,178],56:$Vy,57:$Vz,72:$VA,73:$VB,74:$VC,75:$VD,76:$VE,77:$VF,78:$VG,79:$VH,80:$VI,81:$VJ,82:$VK,83:$VL},{15:[1,179],56:$Vy,57:$Vz,72:$VA,73:$VB,74:$VC,75:$VD,76:$VE,77:$VF,78:$VG,79:$VH,80:$VI,81:$VJ,82:$VK,83:$VL},{15:[1,180],56:$Vy,57:$Vz,72:$VA,73:$VB,74:$VC,75:$VD,76:$VE,77:$VF,78:$VG,79:$VH,80:$VI,81:$VJ,82:$VK,83:$VL},o($VM,[2,121]),o($V11,[2,18]),o($V21,[2,20]),o($V21,[2,25]),o($V21,[2,30]),o($V21,[2,31]),{13:$Va,14:$Vb,19:181,73:$Vc,84:$Vd,85:35,86:$Ve,87:$Vf,88:$Vg,89:$Vh,90:$Vi,91:$Vj,92:$Vk,93:$Vl,94:$Vm,95:$Vn,96:$Vo,97:$Vp,98:$Vq,99:$Vr,100:$Vs,101:$Vt},{13:$Va,14:$Vb,19:182,73:$Vc,84:$Vd,85:35,86:$Ve,87:$Vf,88:$Vg,89:$Vh,90:$Vi,91:$Vj,92:$Vk,93:$Vl,94:$Vm,95:$Vn,96:$Vo,97:$Vp,98:$Vq,99:$Vr,100:$Vs,101:$Vt},{12:185,13:$V91,14:$Va1,19:183,48:184,49:186,73:$Vc,84:$Vd,85:35,86:$Ve,87:$Vf,88:$Vg,89:$Vh,90:$Vi,91:$Vj,92:$Vk,93:$Vl,94:$Vm,95:$Vn,96:$Vo,97:$Vp,98:$Vq,99:$Vr,100:$Vs,101:$Vt},{13:$Vb1,46:189},o($Vc1,[2,77]),o($Vc1,[2,78]),{13:$Va,14:$Vb,19:191,73:$Vc,84:$Vd,85:35,86:$Ve,87:$Vf,88:$Vg,89:$Vh,90:$Vi,91:$Vj,92:$Vk,93:$Vl,94:$Vm,95:$Vn,96:$Vo,97:$Vp,98:$Vq,99:$Vr,100:$Vs,101:$Vt},{16:$Vd1,18:$Ve1,47:$Vf1,52:[1,194]},{13:[1,199],20:198,30:196,35:197,60:195,102:$V2,103:$V3,104:$V4,105:$V5,106:$V6},{45:[1,200]},{13:$Va,14:$Vb,19:201,73:$Vc,84:$Vd,85:35,86:$Ve,87:$Vf,88:$Vg,89:$Vh,90:$Vi,91:$Vj,92:$Vk,93:$Vl,94:$Vm,95:$Vn,96:$Vo,97:$Vp,98:$Vq,99:$Vr,100:$Vs,101:$Vt},{13:$Va,14:$Vb,19:202,73:$Vc,84:$Vd,85:35,86:$Ve,87:$Vf,88:$Vg,89:$Vh,90:$Vi,91:$Vj,92:$Vk,93:$Vl,94:$Vm,95:$Vn,96:$Vo,97:$Vp,98:$Vq,99:$Vr,100:$Vs,101:$Vt},{20:203,102:$V2,103:$V3,104:$V4,105:$V5,106:$V6},{13:[1,204]},{13:[1,205]},o($VZ,[2,16]),o($VM,[2,111]),{13:$Va,14:$Vb,19:206,73:$Vc,84:$Vd,85:35,86:$Ve,87:$Vf,88:$Vg,89:$Vh,90:$Vi,91:$Vj,92:$Vk,93:$Vl,94:$Vm,95:$Vn,96:$Vo,97:$Vp,98:$Vq,99:$Vr,100:$Vs,101:$Vt},o($VM,[2,113]),o($VM,[2,114]),o($VM,[2,115]),o($VM,[2,116]),o($VM,[2,117]),o($VM,[2,118]),o($VM,[2,119]),o($VM,[2,120]),{15:[1,207],56:$Vy,57:$Vz,72:$VA,73:$VB,74:$VC,75:$VD,76:$VE,77:$VF,78:$VG,79:$VH,80:$VI,81:$VJ,82:$VK,83:$VL},{15:[1,208],56:$Vy,57:$Vz,72:$VA,73:$VB,74:$VC,75:$VD,76:$VE,77:$VF,78:$VG,79:$VH,80:$VI,81:$VJ,82:$VK,83:$VL},o($Vc1,[2,54],{50:$Vg1,56:$Vy,57:$Vz,72:$VA,73:$VB,74:$VC,75:$VD,76:$VE,77:$VF,78:$VG,79:$VH,80:$VI,81:$VJ,82:$VK,83:$VL}),o($Vc1,[2,55]),o($Vc1,[2,56]),o($Vc1,[2,57]),o([15,16,50,56,57,72,73,74,75,76,77,78,79,80,81,82,83],$VN,{14:$V9,52:$VO}),{13:$Va,14:$Vb,19:90,20:210,73:$Vc,84:$Vd,85:35,86:$Ve,87:$Vf,88:$Vg,89:$Vh,90:$Vi,91:$Vj,92:$Vk,93:$Vl,94:$Vm,95:$Vn,96:$Vo,97:$Vp,98:$Vq,99:$Vr,100:$Vs,101:$Vt,102:$V2,103:$V3,104:$V4,105:$V5,106:$V6},{18:$Vh1,47:[1,211]},o($Vi1,[2,53]),{53:[1,213],56:$Vy,57:$Vz,72:$VA,73:$VB,74:$VC,75:$VD,76:$VE,77:$VF,78:$VG,79:$VH,80:$VI,81:$VJ,82:$VK,83:$VL},{13:$Vb1,46:214},{12:218,13:$V91,14:$Va1,19:215,48:216,49:217,73:$Vc,84:$Vd,85:35,86:$Ve,87:$Vf,88:$Vg,89:$Vh,90:$Vi,91:$Vj,92:$Vk,93:$Vl,94:$Vm,95:$Vn,96:$Vo,97:$Vp,98:$Vq,99:$Vr,100:$Vs,101:$Vt},{53:[1,219]},{16:[1,220]},{16:[2,72]},{16:[2,73]},{13:[1,221]},{18:$V31,47:$V41},{14:[1,222]},{15:[1,223],56:$Vy,57:$Vz,72:$VA,73:$VB,74:$VC,75:$VD,76:$VE,77:$VF,78:$VG,79:$VH,80:$VI,81:$VJ,82:$VK,83:$VL},{15:[1,224],56:$Vy,57:$Vz,72:$VA,73:$VB,74:$VC,75:$VD,76:$VE,77:$VF,78:$VG,79:$VH,80:$VI,81:$VJ,82:$VK,83:$VL},{57:[1,225]},{18:[1,226]},{18:[1,227]},{15:[1,228],56:$Vy,57:$Vz,72:$VA,73:$VB,74:$VC,75:$VD,76:$VE,77:$VF,78:$VG,79:$VH,80:$VI,81:$VJ,82:$VK,83:$VL},{21:229,24:$Vu},{21:230,24:$Vu},{13:$Va,14:$Vb,19:231,73:$Vc,84:$Vd,85:35,86:$Ve,87:$Vf,88:$Vg,89:$Vh,90:$Vi,91:$Vj,92:$Vk,93:$Vl,94:$Vm,95:$Vn,96:$Vo,97:$Vp,98:$Vq,99:$Vr,100:$Vs,101:$Vt},{15:[1,232]},{12:235,13:$V91,14:$Va1,19:233,48:234,49:236,73:$Vc,84:$Vd,85:35,86:$Ve,87:$Vf,88:$Vg,89:$Vh,90:$Vi,91:$Vj,92:$Vk,93:$Vl,94:$Vm,95:$Vn,96:$Vo,97:$Vp,98:$Vq,99:$Vr,100:$Vs,101:$Vt},{13:[1,237]},{47:[1,238]},{16:[2,43],18:$Vh1,47:[1,239]},{16:[2,44],50:$Vg1,56:$Vy,57:$Vz,72:$VA,73:$VB,74:$VC,75:$VD,76:$VE,77:$VF,78:$VG,79:$VH,80:$VI,81:$VJ,82:$VK,83:$VL},{16:[2,45]},{16:[2,46]},{16:[2,50]},{16:[1,241],47:[1,240]},{13:$Va,14:$Vb,19:242,73:$Vc,84:$Vd,85:35,86:$Ve,87:$Vf,88:$Vg,89:$Vh,90:$Vi,91:$Vj,92:$Vk,93:$Vl,94:$Vm,95:$Vn,96:$Vo,97:$Vp,98:$Vq,99:$Vr,100:$Vs,101:$Vt},{16:$Vd1,18:$Ve1,47:$Vf1},{13:$Va,14:$Vb,19:243,73:$Vc,84:$Vd,85:35,86:$Ve,87:$Vf,88:$Vg,89:$Vh,90:$Vi,91:$Vj,92:$Vk,93:$Vl,94:$Vm,95:$Vn,96:$Vo,97:$Vp,98:$Vq,99:$Vr,100:$Vs,101:$Vt},{16:[1,244]},{24:[1,245]},{13:[1,246]},{13:$Va,14:$Vb,19:247,73:$Vc,84:$Vd,85:35,86:$Ve,87:$Vf,88:$Vg,89:$Vh,90:$Vi,91:$Vj,92:$Vk,93:$Vl,94:$Vm,95:$Vn,96:$Vo,97:$Vp,98:$Vq,99:$Vr,100:$Vs,101:$Vt},{13:$Va,14:$Vb,19:248,73:$Vc,84:$Vd,85:35,86:$Ve,87:$Vf,88:$Vg,89:$Vh,90:$Vi,91:$Vj,92:$Vk,93:$Vl,94:$Vm,95:$Vn,96:$Vo,97:$Vp,98:$Vq,99:$Vr,100:$Vs,101:$Vt},o($VM,[2,112]),o($V21,[2,40],{43:249,44:[1,250]}),o($V21,[2,41]),{51:[1,251],56:$Vy,57:$Vz,72:$VA,73:$VB,74:$VC,75:$VD,76:$VE,77:$VF,78:$VG,79:$VH,80:$VI,81:$VJ,82:$VK,83:$VL},{13:$Va,14:$Vb,19:252,73:$Vc,84:$Vd,85:35,86:$Ve,87:$Vf,88:$Vg,89:$Vh,90:$Vi,91:$Vj,92:$Vk,93:$Vl,94:$Vm,95:$Vn,96:$Vo,97:$Vp,98:$Vq,99:$Vr,100:$Vs,101:$Vt},o($Vc1,[2,58],{50:$Vg1,56:$Vy,57:$Vz,72:$VA,73:$VB,74:$VC,75:$VD,76:$VE,77:$VF,78:$VG,79:$VH,80:$VI,81:$VJ,82:$VK,83:$VL}),o($Vc1,[2,59]),o($Vc1,[2,60]),o($Vc1,[2,61]),o($Vi1,[2,52]),{13:$Va,14:$Vb,19:253,73:$Vc,84:$Vd,85:35,86:$Ve,87:$Vf,88:$Vg,89:$Vh,90:$Vi,91:$Vj,92:$Vk,93:$Vl,94:$Vm,95:$Vn,96:$Vo,97:$Vp,98:$Vq,99:$Vr,100:$Vs,101:$Vt},{12:257,13:$V91,14:$Va1,19:254,48:255,49:256,73:$Vc,84:$Vd,85:35,86:$Ve,87:$Vf,88:$Vg,89:$Vh,90:$Vi,91:$Vj,92:$Vk,93:$Vl,94:$Vm,95:$Vn,96:$Vo,97:$Vp,98:$Vq,99:$Vr,100:$Vs,101:$Vt},{24:[1,259],54:[1,258]},o($V21,[2,66]),{16:[1,260],56:$Vy,57:$Vz,72:$VA,73:$VB,74:$VC,75:$VD,76:$VE,77:$VF,78:$VG,79:$VH,80:$VI,81:$VJ,82:$VK,83:$VL},{15:[1,261],56:$Vy,57:$Vz,72:$VA,73:$VB,74:$VC,75:$VD,76:$VE,77:$VF,78:$VG,79:$VH,80:$VI,81:$VJ,82:$VK,83:$VL},o($V21,[2,85]),{67:262,69:[1,263]},{47:[1,264]},{15:[1,265],56:$Vy,57:$Vz,72:$VA,73:$VB,74:$VC,75:$VD,76:$VE,77:$VF,78:$VG,79:$VH,80:$VI,81:$VJ,82:$VK,83:$VL},{18:[1,266],56:$Vy,57:$Vz,72:$VA,73:$VB,74:$VC,75:$VD,76:$VE,77:$VF,78:$VG,79:$VH,80:$VI,81:$VJ,82:$VK,83:$VL},o($V21,[2,37]),{21:267,24:$Vu,28:268,42:$VQ},{13:$Va,14:$Vb,19:269,73:$Vc,84:$Vd,85:35,86:$Ve,87:$Vf,88:$Vg,89:$Vh,90:$Vi,91:$Vj,92:$Vk,93:$Vl,94:$Vm,95:$Vn,96:$Vo,97:$Vp,98:$Vq,99:$Vr,100:$Vs,101:$Vt},o($Vc1,[2,63],{56:$Vy,57:$Vz,72:$VA,73:$VB,74:$VC,75:$VD,76:$VE,77:$VF,78:$VG,79:$VH,80:$VI,81:$VJ,82:$VK,83:$VL}),{16:[1,270],56:$Vy,57:$Vz,72:$VA,73:$VB,74:$VC,75:$VD,76:$VE,77:$VF,78:$VG,79:$VH,80:$VI,81:$VJ,82:$VK,83:$VL},{16:[2,47],50:$Vg1,56:$Vy,57:$Vz,72:$VA,73:$VB,74:$VC,75:$VD,76:$VE,77:$VF,78:$VG,79:$VH,80:$VI,81:$VJ,82:$VK,83:$VL},{16:[2,48]},{16:[2,49]},{16:[2,51]},{20:271,102:$V2,103:$V3,104:$V4,105:$V5,106:$V6},{13:$Va,14:$Vb,17:272,19:32,73:$Vc,84:$Vd,85:35,86:$Ve,87:$Vf,88:$Vg,89:$Vh,90:$Vi,91:$Vj,92:$Vk,93:$Vl,94:$Vm,95:$Vn,96:$Vo,97:$Vp,98:$Vq,99:$Vr,100:$Vs,101:$Vt},{13:[1,276],35:274,36:275,61:273},{16:[1,277]},{26:[2,84],68:278,69:[1,279],70:[1,280]},{13:$Va,14:$Vb,19:281,73:$Vc,84:$Vd,85:35,86:$Ve,87:$Vf,88:$Vg,89:$Vh,90:$Vi,91:$Vj,92:$Vk,93:$Vl,94:$Vm,95:$Vn,96:$Vo,97:$Vp,98:$Vq,99:$Vr,100:$Vs,101:$Vt},{13:$Va,14:$Vb,19:283,54:[1,282],73:$Vc,84:$Vd,85:35,86:$Ve,87:$Vf,88:$Vg,89:$Vh,90:$Vi,91:$Vj,92:$Vk,93:$Vl,94:$Vm,95:$Vn,96:$Vo,97:$Vp,98:$Vq,99:$Vr,100:$Vs,101:$Vt},{16:[1,284]},{13:$Va,14:$Vb,19:285,73:$Vc,84:$Vd,85:35,86:$Ve,87:$Vf,88:$Vg,89:$Vh,90:$Vi,91:$Vj,92:$Vk,93:$Vl,94:$Vm,95:$Vn,96:$Vo,97:$Vp,98:$Vq,99:$Vr,100:$Vs,101:$Vt},o($V21,[2,38]),o($V21,[2,39]),o($Vc1,[2,62],{56:$Vy,57:$Vz,72:$VA,73:$VB,74:$VC,75:$VD,76:$VE,77:$VF,78:$VG,79:$VH,80:$VI,81:$VJ,82:$VK,83:$VL}),o($V21,[2,67]),{52:[1,286]},{18:$Vw,26:[1,287]},{15:[1,288]},{15:[2,74]},{15:[2,75]},{18:$V31,47:$V41,63:$V51,64:$V61},o($V21,[2,79]),{26:[1,289]},{13:$Va,14:$Vb,19:290,73:$Vc,84:$Vd,85:35,86:$Ve,87:$Vf,88:$Vg,89:$Vh,90:$Vi,91:$Vj,92:$Vk,93:$Vl,94:$Vm,95:$Vn,96:$Vo,97:$Vp,98:$Vq,99:$Vr,100:$Vs,101:$Vt},{51:[1,291]},{51:[1,292],56:$Vy,57:$Vz,72:$VA,73:$VB,74:$VC,75:$VD,76:$VE,77:$VF,78:$VG,79:$VH,80:$VI,81:$VJ,82:$VK,83:$VL},{55:[1,293]},{16:[1,294],56:$Vy,57:$Vz,72:$VA,73:$VB,74:$VC,75:$VD,76:$VE,77:$VF,78:$VG,79:$VH,80:$VI,81:$VJ,82:$VK,83:$VL},o($V21,[2,70]),{15:[1,295],56:$Vy,57:$Vz,72:$VA,73:$VB,74:$VC,75:$VD,76:$VE,77:$VF,78:$VG,79:$VH,80:$VI,81:$VJ,82:$VK,83:$VL},{13:$Va,14:$Vb,19:296,73:$Vc,84:$Vd,85:35,86:$Ve,87:$Vf,88:$Vg,89:$Vh,90:$Vi,91:$Vj,92:$Vk,93:$Vl,94:$Vm,95:$Vn,96:$Vo,97:$Vp,98:$Vq,99:$Vr,100:$Vs,101:$Vt},{16:[1,297]},{21:298,24:$Vu},o($V21,[2,80]),{51:[1,299],56:$Vy,57:$Vz,72:$VA,73:$VB,74:$VC,75:$VD,76:$VE,77:$VF,78:$VG,79:$VH,80:$VI,81:$VJ,82:$VK,83:$VL},{12:96,13:$VP,20:112,25:300,27:93,28:94,29:95,30:97,31:98,32:99,33:100,34:101,35:102,36:103,37:104,38:105,39:106,40:107,41:108,42:$VQ,45:$VR,55:$VS,58:$VT,59:$VU,62:$VV,65:$VW,66:$VX,71:$VY,102:$V2,103:$V3,104:$V4,105:$V5,106:$V6},{12:96,13:$VP,20:112,25:301,27:93,28:94,29:95,30:97,31:98,32:99,33:100,34:101,35:102,36:103,37:104,38:105,39:106,40:107,41:108,42:$VQ,45:$VR,55:$VS,58:$VT,59:$VU,62:$VV,65:$VW,66:$VX,71:$VY,102:$V2,103:$V3,104:$V4,105:$V5,106:$V6},{56:[1,302]},o($V21,[2,69]),{16:[1,303]},{53:[1,304],56:$Vy,57:$Vz,72:$VA,73:$VB,74:$VC,75:$VD,76:$VE,77:$VF,78:$VG,79:$VH,80:$VI,81:$VJ,82:$VK,83:$VL},o($V21,[2,65]),o($V21,[2,76]),{12:96,13:$VP,20:112,25:305,27:93,28:94,29:95,30:97,31:98,32:99,33:100,34:101,35:102,36:103,37:104,38:105,39:106,40:107,41:108,42:$VQ,45:$VR,55:$VS,58:$VT,59:$VU,62:$VV,65:$VW,66:$VX,71:$VY,102:$V2,103:$V3,104:$V4,105:$V5,106:$V6},{12:96,13:$VP,20:112,26:[2,83],27:151,28:94,29:95,30:97,31:98,32:99,33:100,34:101,35:102,36:103,37:104,38:105,39:106,40:107,41:108,42:$VQ,45:$VR,55:$VS,58:$VT,59:$VU,62:$VV,65:$VW,66:$VX,71:$VY,102:$V2,103:$V3,104:$V4,105:$V5,106:$V6},o($Vj1,[2,82],{28:94,29:95,12:96,30:97,31:98,32:99,33:100,34:101,35:102,36:103,37:104,38:105,39:106,40:107,41:108,20:112,27:151,13:$VP,42:$VQ,45:$VR,55:$VS,58:$VT,59:$VU,62:$VV,65:$VW,66:$VX,71:$VY,102:$V2,103:$V3,104:$V4,105:$V5,106:$V6}),{20:306,102:$V2,103:$V3,104:$V4,105:$V5,106:$V6},o($V21,[2,71]),{16:[1,307]},o($Vj1,[2,81],{28:94,29:95,12:96,30:97,31:98,32:99,33:100,34:101,35:102,36:103,37:104,38:105,39:106,40:107,41:108,20:112,27:151,13:$VP,42:$VQ,45:$VR,55:$VS,58:$VT,59:$VU,62:$VV,65:$VW,66:$VX,71:$VY,102:$V2,103:$V3,104:$V4,105:$V5,106:$V6}),{57:[1,308]},o($V21,[2,64]),{16:[1,309]},o($V21,[2,68])],
defaultActions: {15:[2,1],196:[2,72],197:[2,73],216:[2,45],217:[2,46],218:[2,50],255:[2,48],256:[2,49],257:[2,51],274:[2,74],275:[2,75]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

    const { Statement } = require('./instrucciones/statement');
    const { IfInstruccion } = require('./instrucciones/if-instruccion');
    const { ForInstruccion } = require('./instrucciones/for-instruccion');
    const { SwitchInstruccion } = require('./instrucciones/switch-instruccion');
    const { CaseInstruccion } = require('./instrucciones/case-instruccion');
    const { Llamada } = require('./instrucciones/llamada-instruccion');
    const { WriteLine } = require('./instrucciones/writeline');
    const { WhileInstruccion } = require('./instrucciones/while-instruccion');
    const { DoWhileInstruccion } = require('./instrucciones/do-while-instruccion');
    const { FuncionInstruccion } = require('./instrucciones/funcion-instruccion');
    const { MetodoInstruccion } = require('./instrucciones/declaracion-metodo');
    const { Declaracion } = require('./instrucciones/declaracion');
    const { Asignacion } = require('./instrucciones/asignacion');
    const { AsignacionMultiple } = require('./instrucciones/asignacion-multiple');
    const { Ternario } = require('./instrucciones/ternario');
    const { Casteo } = require('./instrucciones/casteo');
    const { DeclaracionVector } = require('./instrucciones/declaracion-vector');
    const { AsignacionVector } = require('./instrucciones/asignacion-vector');
    const { Actualizacion, OpcionActualizacion } = require('./instrucciones/actualizacion');
    const { DeclaracionMultiple } = require('./instrucciones/declaracion-multiple');
    const { DeclaracionDynamic } = require("./instrucciones/declaracion-dynamic");
    const { AppendInstruccion } = require("./instrucciones/append");
    const { SetValue } = require("./instrucciones/setValue");
    const { StartWith } = require("./instrucciones/startWith");

    const { Aritmetica, OperacionAritmetica } = require('./Expresiones/aritmetica');
    const { Relacional, OpcionRelacional } = require('./Expresiones/relacional');
    const { Literal } = require('./Expresiones/literal');
    const { Acceso } = require('./Expresiones/acceso');
    const { ExpresionLogica, OperadoresLogicos } = require('./Expresiones/logica');
    const { AccesoVector } = require("./Expresiones/acceso-vector");
    const { GetValue } = require("./Expresiones/getValue");
    const { ToLower } = require("./Expresiones/toLower");
    const { ToUpper } = require("./Expresiones/toUpper");
    const { Length } = require("./Expresiones/length");
    const { Truncate } = require("./Expresiones/truncate");
    const { Round } = require("./Expresiones/round");
    const { TypeOf } = require("./Expresiones/typeof");
    const { ToString } = require("./Expresiones/toString");
    const { ToCharArray } = require("./Expresiones/toCharArray");

    const { Tipo } = require('./abstractas/retorno');

    
    const { Error_ } = require('./Error/error');
    const { errores } = require('./Error/errores');
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* Ignorar espacios en blanco */
break;
case 1:return "int"
break;
case 2:return "double"
break;
case 3:return "boolean"
break;
case 4:return "char"
break;
case 5:return "string"
break;
case 6:return "if"
break;
case 7:return "else"
break;
case 8:return "switch"
break;
case 9:return "case"
break;
case 10:return "default"
break;
case 11:return "break"
break;
case 12:return "while"
break;
case 13:return "for"
break;
case 14:return "do"
break;
case 15:return "continue"
break;
case 16:return "return"
break;
case 17:return "void"
break;
case 18:return "writeline"
break;
case 19:return "tolower"
break;
case 20:return "toupper"
break;
case 21:return "length"
break;
case 22:return "truncate"
break;
case 23:return "round"
break;
case 24:return "typeof"
break;
case 25:return "tostring"
break;
case 26:return "tochararray"
break;
case 27:return "start"
break;
case 28:return "with"
break;
case 29:return "true"
break;
case 30:return "false"
break;
case 31:return "dynamiclist"
break;
case 32:return "new"
break;
case 33:return "append"
break;
case 34:return "getvalue"
break;
case 35:return "setvalue"
break;
case 36:return "null"
break;
case 37:return "{"
break;
case 38:return "}"
break;
case 39:return "("
break;
case 40:return ")"
break;
case 41:return "["
break;
case 42:return "]"
break;
case 43:return "++"
break;
case 44:return "+"
break;
case 45:return "--"
break;
case 46:return "-"
break;
case 47:return "*"
break;
case 48:return "/"
break;
case 49:return "^"
break;
case 50:return "%"
break;
case 51:return "=="
break;
case 52:return "!="
break;
case 53:return "<="
break;
case 54:return ">="
break;
case 55:return "<"
break;
case 56:return ">"
break;
case 57:return "="
break;
case 58:return "?"
break;
case 59:return "&&"
break;
case 60:return "||"
break;
case 61:return "!"
break;
case 62:return ":"
break;
case 63:return ","
break;
case 64:return ";"
break;
case 65:return "decimal"
break;
case 66:return "numero"
break;
case 67:return "id"
break;
case 68:return "cadena"
break;
case 69:return "caracter"
break;
case 70:return "EOF"
break;
case 71:console.log('[ERROR LEXICO]: ' + yy_.yytext + ', ' + yy_.yylloc.first_line + ', ' +  yy_.yylloc.column);
                errores.push(new Error_(yy_.yylloc.first_line, yy_.yylloc.column, 'Lexico', yy_.yytext));
            
break;
}
},
rules: [/^(?:\s+)/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:boolean\b)/i,/^(?:char\b)/i,/^(?:string\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:break\b)/i,/^(?:while\b)/i,/^(?:for\b)/i,/^(?:do\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:void\b)/i,/^(?:writeline\b)/i,/^(?:tolower\b)/i,/^(?:toupper\b)/i,/^(?:length\b)/i,/^(?:truncate\b)/i,/^(?:round\b)/i,/^(?:typeof\b)/i,/^(?:tostring\b)/i,/^(?:tochararray\b)/i,/^(?:start\b)/i,/^(?:with\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:dynamiclist\b)/i,/^(?:new\b)/i,/^(?:append\b)/i,/^(?:getvalue\b)/i,/^(?:setvalue\b)/i,/^(?:null\b)/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\()/i,/^(?:\))/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\+\+)/i,/^(?:\+)/i,/^(?:--)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:\^)/i,/^(?:%)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:<)/i,/^(?:>)/i,/^(?:=)/i,/^(?:\?)/i,/^(?:&&)/i,/^(?:\|\|)/i,/^(?:!)/i,/^(?::)/i,/^(?:,)/i,/^(?:;)/i,/^(?:(([0-9]+)\.([0-9]+)))/i,/^(?:([0-9]+))/i,/^(?:(([a-zA-Z_])[a-zA-Z0-9_ñÑ]*))/i,/^(?:(("[^"]*")))/i,/^(?:(('[^']')))/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}