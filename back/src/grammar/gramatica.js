/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,6],$V1=[1,8],$V2=[1,9],$V3=[1,10],$V4=[1,11],$V5=[1,12],$V6=[1,13],$V7=[5,9,80,81,82,83,84,85],$V8=[12,14],$V9=[1,21],$Va=[1,37],$Vb=[1,38],$Vc=[1,28],$Vd=[1,30],$Ve=[1,31],$Vf=[1,32],$Vg=[1,33],$Vh=[1,34],$Vi=[1,35],$Vj=[1,36],$Vk=[1,40],$Vl=[14,17],$Vm=[1,47],$Vn=[1,48],$Vo=[1,49],$Vp=[1,50],$Vq=[1,51],$Vr=[1,52],$Vs=[1,53],$Vt=[1,54],$Vu=[1,55],$Vv=[1,56],$Vw=[1,57],$Vx=[1,58],$Vy=[1,59],$Vz=[1,60],$VA=[14,15,17,43,44,57,58,59,60,61,62,63,64,65,66,67,68,69,70],$VB=[2,89],$VC=[1,78],$VD=[1,76],$VE=[1,77],$VF=[1,80],$VG=[1,81],$VH=[1,83],$VI=[1,82],$VJ=[5,9,12,14,15,24,35,38,47,50,51,54,55,56,80,81,82,83,84,85],$VK=[5,9,12,24,35,37,38,47,50,51,54,55,56,80,81,82,83,84,85],$VL=[12,24,35,38,47,50,51,54,55,56,80,81,82,83,84,85],$VM=[1,110],$VN=[1,111],$VO=[1,112],$VP=[14,15,17,43,44,57,58,63,64,65,66,67,68,69,70],$VQ=[14,15,17,43,44,57,58,59,60,63,64,65,66,67,68,69,70],$VR=[14,15,17,43,44,63,64,65,66,67,68,69,70],$VS=[14,15,17,43,44,67,68,69,70],$VT=[1,125],$VU=[1,126],$VV=[14,15],$VW=[1,138],$VX=[15,17,40],$VY=[24,54,55];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INIT":3,"INSTRUCCIONES":4,"EOF":5,"INSTRUCCION":6,"STRTWITH":7,"DECFUNCION":8,"start":9,"with":10,"LLAMADA":11,"id":12,"(":13,")":14,";":15,"LISTAEXPRESIONES":16,",":17,"EXPRESION":18,"TIPOSDATOS":19,"STATEMENT":20,"DEFPARAMETROS":21,"{":22,"CONTENIDO":23,"}":24,"SEGMENTO":25,"INSIF":26,"INSWHILE":27,"INSDECLARACION":28,"INSFOR":29,"INSDOWHILE":30,"INSWRITELINE":31,"INSSWITCH":32,"ASIGNACION":33,"ACTUALIZACION":34,"if":35,"INSELSE":36,"else":37,"while":38,"LISTAIDS":39,"=":40,"TERNARIO":41,"CASTEO":42,"?":43,":":44,"FORINICIO":45,"FORFINAL":46,"for":47,"++":48,"--":49,"do":50,"switch":51,"INSCASES":52,"INSDEFAULT":53,"case":54,"default":55,"writeline":56,"+":57,"-":58,"*":59,"/":60,"^":61,"%":62,"<":63,"<=":64,">":65,">=":66,"==":67,"!=":68,"&&":69,"||":70,"!":71,"VALOR":72,"numero":73,"decimal":74,"cadena":75,"caracter":76,"true":77,"false":78,"null":79,"string":80,"int":81,"double":82,"boolean":83,"char":84,"void":85,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",9:"start",10:"with",12:"id",13:"(",14:")",15:";",17:",",22:"{",24:"}",35:"if",37:"else",38:"while",40:"=",43:"?",44:":",47:"for",48:"++",49:"--",50:"do",51:"switch",54:"case",55:"default",56:"writeline",57:"+",58:"-",59:"*",60:"/",61:"^",62:"%",63:"<",64:"<=",65:">",66:">=",67:"==",68:"!=",69:"&&",70:"||",71:"!",73:"numero",74:"decimal",75:"cadena",76:"caracter",77:"true",78:"false",79:"null",80:"string",81:"int",82:"double",83:"boolean",84:"char",85:"void"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[7,3],[11,4],[11,5],[16,3],[16,1],[8,5],[8,6],[21,4],[21,2],[20,3],[20,2],[23,2],[23,1],[25,1],[25,1],[25,1],[25,2],[25,1],[25,1],[25,1],[25,1],[25,2],[25,2],[26,6],[36,2],[36,2],[36,0],[27,5],[28,2],[28,4],[28,4],[28,4],[28,4],[28,6],[28,6],[28,6],[28,4],[28,6],[39,3],[39,1],[33,3],[33,3],[33,3],[33,3],[41,5],[42,4],[45,1],[45,1],[46,1],[46,1],[29,9],[34,2],[34,2],[30,7],[32,8],[52,5],[52,4],[53,3],[53,0],[31,5],[18,3],[18,3],[18,3],[18,3],[18,3],[18,3],[18,3],[18,3],[18,3],[18,3],[18,3],[18,3],[18,3],[18,3],[18,2],[18,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,3],[19,1],[19,1],[19,1],[19,1],[19,1],[19,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

        return $$[$0-1];
    
break;
case 2: case 17:

        $$[$0-1].push($$[$0]);
        this.$ = $$[$0-1];
    
break;
case 3: case 10: case 18: case 45:

        this.$ = [$$[$0]];
    
break;
case 4: case 5: case 30: case 31: case 54: case 55: case 81:

        this.$ = $$[$0];
    
break;
case 6:

        console.log($$[$0-2], $$[$0-1]);
        this.$ = $$[$0];
    
break;
case 7:

        console.log($$[$0-3], $$[$0-2], $$[$0-1], $$[$0]);
        this.$ = new Llamada($$[$0-3], new Array(), _$[$0-3].first_line, _$[$0-3].first_column);
    
break;
case 8:

        console.log($$[$0-4], $$[$0-3], $$[$0-2], $$[$0-1], $$[$0]);
        this.$ = new Llamada($$[$0-4], $$[$0-2], _$[$0-4].first_line, _$[$0-4].first_column);
    
break;
case 9: case 44:

        $$[$0-2].push($$[$0]);
        this.$ = $$[$0-2];
    
break;
case 11:

        this.$ = new FuncionInstruccion($$[$0-3], $$[$0], new Array(), $$[$0-4], _$[$0-4].first_line, _$[$0-4].first_column);
    
break;
case 12:

        this.$ = new FuncionInstruccion($$[$0-4], $$[$0], $$[$0-2], $$[$0-5], _$[$0-5].first_line, _$[$0-5].first_column);
    
break;
case 13:

        $$[$0-3].push(new Declaracion($$[$0-1], $$[$0], null, _$[$0-3].first_line, _$[$0-3].first_column));
        this.$ = $$[$0-3];
    
break;
case 14:

        this.$ = [new Declaracion($$[$0-1], $$[$0], null, _$[$0-1].first_line, _$[$0-1].first_column)];
    
break;
case 15:

        this.$ = new Statement($$[$0-1], _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 16:

        this.$ = new Statement(new Array(), _$[$0-1].first_line, _$[$0-1].first_column);
    
break;
case 29:

        this.$ = new IfInstruccion($$[$0-3], $$[$0-1], $$[$0], _$[$0-5].first_line, _$[$0-5].first_column);
    
break;
case 32: case 64:

        this.$ = null;
    
break;
case 33:

        this.$ = new WhileInstruccion($$[$0-2], $$[$0], _$[$0-4].first_line, _$[$0-4].first_column);
    
break;
case 34:

        this.$ = new Declaracion($$[$0-1], $$[$0], null, _$[$0-1].first_line, _$[$0-1].first_column);
    
break;
case 35:

        $$[$0].push($$[$0-2]);
        this.$ = new DeclaracionMultiple($$[$0-3], $$[$0], null, _$[$0-3].first_line, _$[$0-3].first_column);
    
break;
case 36: case 37: case 38: case 42:

        this.$ = new Declaracion($$[$0-3], $$[$0-2], $$[$0], _$[$0-3].first_line, _$[$0-3].first_column);
    
break;
case 39: case 40: case 41: case 43:

        $$[$0-2].push($$[$0-4]);
        this.$ = new DeclaracionMultiple($$[$0-5], $$[$0-2], $$[$0], _$[$0-5].first_line, _$[$0-5].first_column);
    
break;
case 46: case 47: case 48: case 49:

        this.$ = new Asignacion(null, $$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 50:

        this.$ = new Ternario($$[$0-4], $$[$0-2], $$[$0], _$[$0-4].first_line, _$[$0-4].first_column);
    
break;
case 51:

        this.$ = new Casteo($$[$0-2], $$[$0], _$[$0-3].first_line, _$[$0-3].first_column);
    
break;
case 52: case 53:

        this.$ = $$[$0]
    
break;
case 56:

        this.$ = new ForInstruccion($$[$0-6], $$[$0-4], $$[$0-2], $$[$0], _$[$0-8].first_line, _$[$0-8].first_column);
    
break;
case 57:

        this.$ = new Actualizacion($$[$0-1], OpcionActualizacion.MASMAS, _$[$0-1].first_line, _$[$0-1].first_column);
    
break;
case 58:

        this.$ = new Actualizacion($$[$0-1], OpcionActualizacion.MENOSMENOS, _$[$0-1].first_line, _$[$0-1].first_column);
    
break;
case 59:

        this.$ = new DoWhileInstruccion($$[$0-2], $$[$0-5], _$[$0-6].first_line, _$[$0-6].first_column);
    
break;
case 60:

        this.$ = new SwitchInstruccion($$[$0-5], $$[$0-2], $$[$0-1], _$[$0-7].first_line, _$[$0-7].first_column);
    
break;
case 61:

        $$[$0-4].push(new CaseInstruccion($$[$0-2], $$[$0], _$[$0-4].first_line, _$[$0-4].first_column));
        this.$ = $$[$0-4];
    
break;
case 62:

        this.$ = [new CaseInstruccion($$[$0-2], $$[$0], _$[$0-3].first_line, _$[$0-3].first_column)];
    
break;
case 63:

        this.$ = new Statement($$[$0], _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 65:

        this.$ = new WriteLine($$[$0-2], _$[$0-4].first_line, _$[$0-4].first_column);
    
break;
case 66:

        this.$ = new Aritmetica($$[$0-2], $$[$0], OperacionAritmetica.SUMA, _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 67:

        this.$ = new Aritmetica($$[$0-2], $$[$0], OperacionAritmetica.RESTA, _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 68:

        this.$ = new Aritmetica($$[$0-2], $$[$0], OperacionAritmetica.MULTI, _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 69:

        this.$ = new Aritmetica($$[$0-2], $$[$0], OperacionAritmetica.DIV, _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 70:

        this.$ = new Aritmetica($$[$0-2], $$[$0], OperacionAritmetica.POT, _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 71:

        this.$ = new Aritmetica($$[$0-2], $$[$0], OperacionAritmetica.MOD, _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 72:

        this.$ = new Relacional($$[$0-2], $$[$0], OpcionRelacional.MENOR, _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 73:

        this.$ = new Relacional($$[$0-2], $$[$0], OpcionRelacional.MENORIGUAL, _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 74:

        this.$ = new Relacional($$[$0-2], $$[$0], OpcionRelacional.MAYOR, _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 75:

        this.$ = new Relacional($$[$0-2], $$[$0], OpcionRelacional.MAYORIGUAL, _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 76:

        this.$ = new Relacional($$[$0-2], $$[$0], OpcionRelacional.IGUAL, _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 77:

        this.$ = new Relacional($$[$0-2], $$[$0], OpcionRelacional.DESIGUAL, _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 78:

        this.$ = new ExpresionLogica($$[$0-2], $$[$0], OperadoresLogicos.AND, _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 79:

        this.$ = new ExpresionLogica($$[$0-2], $$[$0], OperadoresLogicos.OR, _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 80:

        this.$ = new ExpresionLogica($$[$0], null, OperadoresLogicos.NOT, _$[$0-1].first_line, _$[$0-1].first_column);
    
break;
case 82:

        this.$ = new Literal($$[$0], _$[$0].first_line, _$[$0].first_column, 0);
    
break;
case 83:

        this.$ = new Literal($$[$0], _$[$0].first_line, _$[$0].first_column, 1);
    
break;
case 84:

        this.$ = new Literal($$[$0], _$[$0].first_line, _$[$0].first_column, 2);
    
break;
case 85:

        this.$ = new Literal($$[$0], _$[$0].first_line, _$[$0].first_column, 3);
    
break;
case 86: case 87: case 88:

        this.$ = new Literal($$[$0], _$[$0].first_line, _$[$0].first_column, 4);
    
break;
case 89:

        this.$ = new Acceso($$[$0], _$[$0].first_line, _$[$0].first_column);
    
break;
case 90:

        console.log($$[$0-1]);
        this.$ = $$[$0-1];
    
break;
case 91:

        this.$ = Tipo.STRING;
    
break;
case 92:

        this.$ = Tipo.INT;
    
break;
case 93:

        this.$ = Tipo.DOUBLE;
    
break;
case 94:

        this.$ = Tipo.BOOLEAN;
    
break;
case 95:

        this.$ = Tipo.CHAR;
    
break;
case 96:

        this.$ = Tipo.VOID;
    
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:5,9:$V0,19:7,80:$V1,81:$V2,82:$V3,83:$V4,84:$V5,85:$V6},{1:[3]},{5:[1,14],6:15,7:4,8:5,9:$V0,19:7,80:$V1,81:$V2,82:$V3,83:$V4,84:$V5,85:$V6},o($V7,[2,3]),o($V7,[2,4]),o($V7,[2,5]),{10:[1,16]},{12:[1,17]},o($V8,[2,91]),o($V8,[2,92]),o($V8,[2,93]),o($V8,[2,94]),o($V8,[2,95]),o($V8,[2,96]),{1:[2,1]},o($V7,[2,2]),{11:18,12:[1,19]},{13:[1,20]},o($V7,[2,6]),{13:$V9},{14:[1,22],19:24,21:23,80:$V1,81:$V2,82:$V3,83:$V4,84:$V5,85:$V6},{12:$Va,13:$Vb,14:[1,25],16:26,18:27,71:$Vc,72:29,73:$Vd,74:$Ve,75:$Vf,76:$Vg,77:$Vh,78:$Vi,79:$Vj},{20:39,22:$Vk},{14:[1,41],17:[1,42]},{12:[1,43]},{15:[1,44]},{14:[1,45],17:[1,46]},o($Vl,[2,10],{57:$Vm,58:$Vn,59:$Vo,60:$Vp,61:$Vq,62:$Vr,63:$Vs,64:$Vt,65:$Vu,66:$Vv,67:$Vw,68:$Vx,69:$Vy,70:$Vz}),{12:$Va,13:$Vb,18:61,71:$Vc,72:29,73:$Vd,74:$Ve,75:$Vf,76:$Vg,77:$Vh,78:$Vi,79:$Vj},o($VA,[2,81]),o($VA,[2,82]),o($VA,[2,83]),o($VA,[2,84]),o($VA,[2,85]),o($VA,[2,86]),o($VA,[2,87]),o($VA,[2,88]),o($VA,$VB),{12:$Va,13:$Vb,18:62,71:$Vc,72:29,73:$Vd,74:$Ve,75:$Vf,76:$Vg,77:$Vh,78:$Vi,79:$Vj},o($V7,[2,11]),{11:68,12:$VC,19:79,23:63,24:[1,64],25:65,26:66,27:67,28:69,29:70,30:71,31:72,32:73,33:74,34:75,35:$VD,38:$VE,47:$VF,50:$VG,51:$VH,56:$VI,80:$V1,81:$V2,82:$V3,83:$V4,84:$V5,85:$V6},{20:84,22:$Vk},{19:85,80:$V1,81:$V2,82:$V3,83:$V4,84:$V5,85:$V6},o($Vl,[2,14]),o($VJ,[2,7]),{15:[1,86]},{12:$Va,13:$Vb,18:87,71:$Vc,72:29,73:$Vd,74:$Ve,75:$Vf,76:$Vg,77:$Vh,78:$Vi,79:$Vj},{12:$Va,13:$Vb,18:88,71:$Vc,72:29,73:$Vd,74:$Ve,75:$Vf,76:$Vg,77:$Vh,78:$Vi,79:$Vj},{12:$Va,13:$Vb,18:89,71:$Vc,72:29,73:$Vd,74:$Ve,75:$Vf,76:$Vg,77:$Vh,78:$Vi,79:$Vj},{12:$Va,13:$Vb,18:90,71:$Vc,72:29,73:$Vd,74:$Ve,75:$Vf,76:$Vg,77:$Vh,78:$Vi,79:$Vj},{12:$Va,13:$Vb,18:91,71:$Vc,72:29,73:$Vd,74:$Ve,75:$Vf,76:$Vg,77:$Vh,78:$Vi,79:$Vj},{12:$Va,13:$Vb,18:92,71:$Vc,72:29,73:$Vd,74:$Ve,75:$Vf,76:$Vg,77:$Vh,78:$Vi,79:$Vj},{12:$Va,13:$Vb,18:93,71:$Vc,72:29,73:$Vd,74:$Ve,75:$Vf,76:$Vg,77:$Vh,78:$Vi,79:$Vj},{12:$Va,13:$Vb,18:94,71:$Vc,72:29,73:$Vd,74:$Ve,75:$Vf,76:$Vg,77:$Vh,78:$Vi,79:$Vj},{12:$Va,13:$Vb,18:95,71:$Vc,72:29,73:$Vd,74:$Ve,75:$Vf,76:$Vg,77:$Vh,78:$Vi,79:$Vj},{12:$Va,13:$Vb,18:96,71:$Vc,72:29,73:$Vd,74:$Ve,75:$Vf,76:$Vg,77:$Vh,78:$Vi,79:$Vj},{12:$Va,13:$Vb,18:97,71:$Vc,72:29,73:$Vd,74:$Ve,75:$Vf,76:$Vg,77:$Vh,78:$Vi,79:$Vj},{12:$Va,13:$Vb,18:98,71:$Vc,72:29,73:$Vd,74:$Ve,75:$Vf,76:$Vg,77:$Vh,78:$Vi,79:$Vj},{12:$Va,13:$Vb,18:99,71:$Vc,72:29,73:$Vd,74:$Ve,75:$Vf,76:$Vg,77:$Vh,78:$Vi,79:$Vj},{12:$Va,13:$Vb,18:100,71:$Vc,72:29,73:$Vd,74:$Ve,75:$Vf,76:$Vg,77:$Vh,78:$Vi,79:$Vj},{12:$Va,13:$Vb,18:101,71:$Vc,72:29,73:$Vd,74:$Ve,75:$Vf,76:$Vg,77:$Vh,78:$Vi,79:$Vj},o([14,15,17,43,44],[2,80],{57:$Vm,58:$Vn,59:$Vo,60:$Vp,61:$Vq,62:$Vr,63:$Vs,64:$Vt,65:$Vu,66:$Vv,67:$Vw,68:$Vx,69:$Vy,70:$Vz}),{14:[1,102],57:$Vm,58:$Vn,59:$Vo,60:$Vp,61:$Vq,62:$Vr,63:$Vs,64:$Vt,65:$Vu,66:$Vv,67:$Vw,68:$Vx,69:$Vy,70:$Vz},{11:68,12:$VC,19:79,24:[1,103],25:104,26:66,27:67,28:69,29:70,30:71,31:72,32:73,33:74,34:75,35:$VD,38:$VE,47:$VF,50:$VG,51:$VH,56:$VI,80:$V1,81:$V2,82:$V3,83:$V4,84:$V5,85:$V6},o($VK,[2,16]),o($VL,[2,18]),o($VL,[2,19]),o($VL,[2,20]),o($VL,[2,21]),{15:[1,105]},o($VL,[2,23]),o($VL,[2,24]),o($VL,[2,25]),o($VL,[2,26]),{15:[1,106]},{15:[1,107]},{13:[1,108]},{13:[1,109]},{13:$V9,40:$VM,48:$VN,49:$VO},{12:[1,113]},{13:[1,114]},{20:115,22:$Vk},{13:[1,116]},{13:[1,117]},o($V7,[2,12]),{12:[1,118]},o($VJ,[2,8]),o($Vl,[2,9],{57:$Vm,58:$Vn,59:$Vo,60:$Vp,61:$Vq,62:$Vr,63:$Vs,64:$Vt,65:$Vu,66:$Vv,67:$Vw,68:$Vx,69:$Vy,70:$Vz}),o($VP,[2,66],{59:$Vo,60:$Vp,61:$Vq,62:$Vr}),o($VP,[2,67],{59:$Vo,60:$Vp,61:$Vq,62:$Vr}),o($VQ,[2,68],{61:$Vq,62:$Vr}),o($VQ,[2,69],{61:$Vq,62:$Vr}),o($VA,[2,70]),o($VA,[2,71]),o($VR,[2,72],{57:$Vm,58:$Vn,59:$Vo,60:$Vp,61:$Vq,62:$Vr}),o($VR,[2,73],{57:$Vm,58:$Vn,59:$Vo,60:$Vp,61:$Vq,62:$Vr}),o($VR,[2,74],{57:$Vm,58:$Vn,59:$Vo,60:$Vp,61:$Vq,62:$Vr}),o($VR,[2,75],{57:$Vm,58:$Vn,59:$Vo,60:$Vp,61:$Vq,62:$Vr}),o($VS,[2,76],{57:$Vm,58:$Vn,59:$Vo,60:$Vp,61:$Vq,62:$Vr,63:$Vs,64:$Vt,65:$Vu,66:$Vv}),o($VS,[2,77],{57:$Vm,58:$Vn,59:$Vo,60:$Vp,61:$Vq,62:$Vr,63:$Vs,64:$Vt,65:$Vu,66:$Vv}),o([14,15,17,43,44,69,70],[2,78],{57:$Vm,58:$Vn,59:$Vo,60:$Vp,61:$Vq,62:$Vr,63:$Vs,64:$Vt,65:$Vu,66:$Vv,67:$Vw,68:$Vx}),o([14,15,17,43,44,70],[2,79],{57:$Vm,58:$Vn,59:$Vo,60:$Vp,61:$Vq,62:$Vr,63:$Vs,64:$Vt,65:$Vu,66:$Vv,67:$Vw,68:$Vx,69:$Vy}),o($VA,[2,90]),o($VK,[2,15]),o($VL,[2,17]),o($VL,[2,22]),o($VL,[2,27]),o($VL,[2,28]),{12:$Va,13:$Vb,18:119,71:$Vc,72:29,73:$Vd,74:$Ve,75:$Vf,76:$Vg,77:$Vh,78:$Vi,79:$Vj},{12:$Va,13:$Vb,18:120,71:$Vc,72:29,73:$Vd,74:$Ve,75:$Vf,76:$Vg,77:$Vh,78:$Vi,79:$Vj},{11:123,12:$VT,13:$VU,18:121,41:122,42:124,71:$Vc,72:29,73:$Vd,74:$Ve,75:$Vf,76:$Vg,77:$Vh,78:$Vi,79:$Vj},o($VV,[2,57]),o($VV,[2,58]),{15:[2,34],17:[1,127],40:[1,128]},{12:[1,132],19:79,28:130,33:131,45:129,80:$V1,81:$V2,82:$V3,83:$V4,84:$V5,85:$V6},{38:[1,133]},{12:$Va,13:$Vb,18:134,71:$Vc,72:29,73:$Vd,74:$Ve,75:$Vf,76:$Vg,77:$Vh,78:$Vi,79:$Vj},{12:$Va,13:$Vb,18:135,71:$Vc,72:29,73:$Vd,74:$Ve,75:$Vf,76:$Vg,77:$Vh,78:$Vi,79:$Vj},o($Vl,[2,13]),{14:[1,136],57:$Vm,58:$Vn,59:$Vo,60:$Vp,61:$Vq,62:$Vr,63:$Vs,64:$Vt,65:$Vu,66:$Vv,67:$Vw,68:$Vx,69:$Vy,70:$Vz},{14:[1,137],57:$Vm,58:$Vn,59:$Vo,60:$Vp,61:$Vq,62:$Vr,63:$Vs,64:$Vt,65:$Vu,66:$Vv,67:$Vw,68:$Vx,69:$Vy,70:$Vz},o($VV,[2,46],{43:$VW,57:$Vm,58:$Vn,59:$Vo,60:$Vp,61:$Vq,62:$Vr,63:$Vs,64:$Vt,65:$Vu,66:$Vv,67:$Vw,68:$Vx,69:$Vy,70:$Vz}),o($VV,[2,47]),o($VV,[2,48]),o($VV,[2,49]),o([14,15,43,57,58,59,60,61,62,63,64,65,66,67,68,69,70],$VB,{13:$V9}),{12:$Va,13:$Vb,18:62,19:139,71:$Vc,72:29,73:$Vd,74:$Ve,75:$Vf,76:$Vg,77:$Vh,78:$Vi,79:$Vj,80:$V1,81:$V2,82:$V3,83:$V4,84:$V5,85:$V6},{12:[1,141],39:140},{11:145,12:$VT,13:$VU,18:142,41:143,42:144,71:$Vc,72:29,73:$Vd,74:$Ve,75:$Vf,76:$Vg,77:$Vh,78:$Vi,79:$Vj},{15:[1,146]},{15:[2,52]},{15:[2,53]},{40:$VM},{13:[1,147]},{14:[1,148],57:$Vm,58:$Vn,59:$Vo,60:$Vp,61:$Vq,62:$Vr,63:$Vs,64:$Vt,65:$Vu,66:$Vv,67:$Vw,68:$Vx,69:$Vy,70:$Vz},{14:[1,149],57:$Vm,58:$Vn,59:$Vo,60:$Vp,61:$Vq,62:$Vr,63:$Vs,64:$Vt,65:$Vu,66:$Vv,67:$Vw,68:$Vx,69:$Vy,70:$Vz},{20:150,22:$Vk},{20:151,22:$Vk},{12:$Va,13:$Vb,18:152,71:$Vc,72:29,73:$Vd,74:$Ve,75:$Vf,76:$Vg,77:$Vh,78:$Vi,79:$Vj},{14:[1,153]},{15:[2,35],17:[1,155],40:[1,154]},o($VX,[2,45]),{15:[2,36],43:$VW,57:$Vm,58:$Vn,59:$Vo,60:$Vp,61:$Vq,62:$Vr,63:$Vs,64:$Vt,65:$Vu,66:$Vv,67:$Vw,68:$Vx,69:$Vy,70:$Vz},{15:[2,37]},{15:[2,38]},{15:[2,42]},{12:$Va,13:$Vb,18:156,71:$Vc,72:29,73:$Vd,74:$Ve,75:$Vf,76:$Vg,77:$Vh,78:$Vi,79:$Vj},{12:$Va,13:$Vb,18:157,71:$Vc,72:29,73:$Vd,74:$Ve,75:$Vf,76:$Vg,77:$Vh,78:$Vi,79:$Vj},{15:[1,158]},{22:[1,159]},o($VL,[2,32],{36:160,37:[1,161]}),o($VL,[2,33]),{44:[1,162],57:$Vm,58:$Vn,59:$Vo,60:$Vp,61:$Vq,62:$Vr,63:$Vs,64:$Vt,65:$Vu,66:$Vv,67:$Vw,68:$Vx,69:$Vy,70:$Vz},{12:$Va,13:$Vb,18:163,71:$Vc,72:29,73:$Vd,74:$Ve,75:$Vf,76:$Vg,77:$Vh,78:$Vi,79:$Vj},{11:167,12:$VT,13:$VU,18:164,41:165,42:166,71:$Vc,72:29,73:$Vd,74:$Ve,75:$Vf,76:$Vg,77:$Vh,78:$Vi,79:$Vj},{12:[1,168]},{15:[1,169],57:$Vm,58:$Vn,59:$Vo,60:$Vp,61:$Vq,62:$Vr,63:$Vs,64:$Vt,65:$Vu,66:$Vv,67:$Vw,68:$Vx,69:$Vy,70:$Vz},{14:[1,170],57:$Vm,58:$Vn,59:$Vo,60:$Vp,61:$Vq,62:$Vr,63:$Vs,64:$Vt,65:$Vu,66:$Vv,67:$Vw,68:$Vx,69:$Vy,70:$Vz},o($VL,[2,65]),{52:171,54:[1,172]},o($VL,[2,29]),{20:173,22:$Vk,26:174,35:$VD},{12:$Va,13:$Vb,18:175,71:$Vc,72:29,73:$Vd,74:$Ve,75:$Vf,76:$Vg,77:$Vh,78:$Vi,79:$Vj},o($VV,[2,51],{57:$Vm,58:$Vn,59:$Vo,60:$Vp,61:$Vq,62:$Vr,63:$Vs,64:$Vt,65:$Vu,66:$Vv,67:$Vw,68:$Vx,69:$Vy,70:$Vz}),{15:[2,39],43:$VW,57:$Vm,58:$Vn,59:$Vo,60:$Vp,61:$Vq,62:$Vr,63:$Vs,64:$Vt,65:$Vu,66:$Vv,67:$Vw,68:$Vx,69:$Vy,70:$Vz},{15:[2,40]},{15:[2,41]},{15:[2,43]},o($VX,[2,44]),{12:[1,179],33:177,34:178,46:176},{15:[1,180]},{24:[2,64],53:181,54:[1,182],55:[1,183]},{12:$Va,13:$Vb,18:184,71:$Vc,72:29,73:$Vd,74:$Ve,75:$Vf,76:$Vg,77:$Vh,78:$Vi,79:$Vj},o($VL,[2,30]),o($VL,[2,31]),o($VV,[2,50],{57:$Vm,58:$Vn,59:$Vo,60:$Vp,61:$Vq,62:$Vr,63:$Vs,64:$Vt,65:$Vu,66:$Vv,67:$Vw,68:$Vx,69:$Vy,70:$Vz}),{14:[1,185]},{14:[2,54]},{14:[2,55]},{40:$VM,48:$VN,49:$VO},o($VL,[2,59]),{24:[1,186]},{12:$Va,13:$Vb,18:187,71:$Vc,72:29,73:$Vd,74:$Ve,75:$Vf,76:$Vg,77:$Vh,78:$Vi,79:$Vj},{44:[1,188]},{44:[1,189],57:$Vm,58:$Vn,59:$Vo,60:$Vp,61:$Vq,62:$Vr,63:$Vs,64:$Vt,65:$Vu,66:$Vv,67:$Vw,68:$Vx,69:$Vy,70:$Vz},{20:190,22:$Vk},o($VL,[2,60]),{44:[1,191],57:$Vm,58:$Vn,59:$Vo,60:$Vp,61:$Vq,62:$Vr,63:$Vs,64:$Vt,65:$Vu,66:$Vv,67:$Vw,68:$Vx,69:$Vy,70:$Vz},{11:68,12:$VC,19:79,23:192,25:65,26:66,27:67,28:69,29:70,30:71,31:72,32:73,33:74,34:75,35:$VD,38:$VE,47:$VF,50:$VG,51:$VH,56:$VI,80:$V1,81:$V2,82:$V3,83:$V4,84:$V5,85:$V6},{11:68,12:$VC,19:79,23:193,25:65,26:66,27:67,28:69,29:70,30:71,31:72,32:73,33:74,34:75,35:$VD,38:$VE,47:$VF,50:$VG,51:$VH,56:$VI,80:$V1,81:$V2,82:$V3,83:$V4,84:$V5,85:$V6},o($VL,[2,56]),{11:68,12:$VC,19:79,23:194,25:65,26:66,27:67,28:69,29:70,30:71,31:72,32:73,33:74,34:75,35:$VD,38:$VE,47:$VF,50:$VG,51:$VH,56:$VI,80:$V1,81:$V2,82:$V3,83:$V4,84:$V5,85:$V6},{11:68,12:$VC,19:79,24:[2,63],25:104,26:66,27:67,28:69,29:70,30:71,31:72,32:73,33:74,34:75,35:$VD,38:$VE,47:$VF,50:$VG,51:$VH,56:$VI,80:$V1,81:$V2,82:$V3,83:$V4,84:$V5,85:$V6},o($VY,[2,62],{26:66,27:67,11:68,28:69,29:70,30:71,31:72,32:73,33:74,34:75,19:79,25:104,12:$VC,35:$VD,38:$VE,47:$VF,50:$VG,51:$VH,56:$VI,80:$V1,81:$V2,82:$V3,83:$V4,84:$V5,85:$V6}),o($VY,[2,61],{26:66,27:67,11:68,28:69,29:70,30:71,31:72,32:73,33:74,34:75,19:79,25:104,12:$VC,35:$VD,38:$VE,47:$VF,50:$VG,51:$VH,56:$VI,80:$V1,81:$V2,82:$V3,83:$V4,84:$V5,85:$V6})],
defaultActions: {14:[2,1],130:[2,52],131:[2,53],143:[2,37],144:[2,38],145:[2,42],165:[2,40],166:[2,41],167:[2,43],177:[2,54],178:[2,55]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

    const { Statement } = require('./instrucciones/statement');
    const { IfInstruccion } = require('./instrucciones/if-instruccion');
    const { ForInstruccion } = require('./instrucciones/for-instruccion');
    const { SwitchInstruccion } = require('./instrucciones/switch-instruccion');
    const { CaseInstruccion } = require('./instrucciones/case-instruccion');
    const { Llamada } = require('./instrucciones/llamada-instruccion');
    const { WriteLine } = require('./instrucciones/writeline');
    const { WhileInstruccion } = require('./instrucciones/while-instruccion');
    const { DoWhileInstruccion } = require('./instrucciones/do-while-instruccion');
    const { FuncionInstruccion } = require('./instrucciones/funcion-instruccion');
    const { Declaracion } = require('./instrucciones/declaracion');
    const { Asignacion } = require('./instrucciones/asignacion');
    const { Ternario } = require('./instrucciones/ternario');
    const { Casteo } = require('./instrucciones/casteo');
    const { Actualizacion, OpcionActualizacion } = require('./instrucciones/actualizacion');
    const { DeclaracionMultiple } = require('./instrucciones/declaracion-multiple');
    const { Aritmetica, OperacionAritmetica } = require('./Expresiones/aritmetica');
    const { Relacional, OpcionRelacional } = require('./Expresiones/relacional');
    const { Literal } = require('./Expresiones/literal');
    const { Acceso } = require('./Expresiones/acceso');
    const { ExpresionLogica, OperadoresLogicos } = require('./Expresiones/logica');
    const { Tipo } = require('./abstractas/retorno');
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* Ignorar espacios en blanco */
break;
case 1:return "int"
break;
case 2:return "double"
break;
case 3:return "boolean"
break;
case 4:return "char"
break;
case 5:return "string"
break;
case 6:return "if"
break;
case 7:return "else"
break;
case 8:return "switch"
break;
case 9:return "case"
break;
case 10:return "default"
break;
case 11:return "break"
break;
case 12:return "while"
break;
case 13:return "for"
break;
case 14:return "do"
break;
case 15:return "continue"
break;
case 16:return "return"
break;
case 17:return "void"
break;
case 18:return "writeline"
break;
case 19:return "tolower"
break;
case 20:return "toupper"
break;
case 21:return "length"
break;
case 22:return "truncate"
break;
case 23:return "round"
break;
case 24:return "typeof"
break;
case 25:return "tostring"
break;
case 26:return "tochararray"
break;
case 27:return "start"
break;
case 28:return "with"
break;
case 29:return "true"
break;
case 30:return "false"
break;
case 31:return "dynamiclist"
break;
case 32:return "new"
break;
case 33:return "append"
break;
case 34:return "getvalue"
break;
case 35:return "setvalue"
break;
case 36:return "null"
break;
case 37:return "{"
break;
case 38:return "}"
break;
case 39:return "("
break;
case 40:return ")"
break;
case 41:return "["
break;
case 42:return "]"
break;
case 43:return "++"
break;
case 44:return "+"
break;
case 45:return "--"
break;
case 46:return "-"
break;
case 47:return "*"
break;
case 48:return "/"
break;
case 49:return "^"
break;
case 50:return "%"
break;
case 51:return "=="
break;
case 52:return "!="
break;
case 53:return "<="
break;
case 54:return ">="
break;
case 55:return "<"
break;
case 56:return ">"
break;
case 57:return "="
break;
case 58:return "?"
break;
case 59:return "&&"
break;
case 60:return "||"
break;
case 61:return "!"
break;
case 62:return ":"
break;
case 63:return ","
break;
case 64:return ";"
break;
case 65:return "decimal"
break;
case 66:return "numero"
break;
case 67:return "id"
break;
case 68:return "cadena"
break;
case 69:return "caracter"
break;
case 70:return "EOF"
break;
case 71:console.log('[ERROR LEXICO]: ' + yy_.yytext + ', ' + yy_.yylloc.first_line + ', ' +  yy_.yylloc.column);
break;
}
},
rules: [/^(?:\s+)/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:boolean\b)/i,/^(?:char\b)/i,/^(?:string\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:break\b)/i,/^(?:while\b)/i,/^(?:for\b)/i,/^(?:do\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:void\b)/i,/^(?:writeline\b)/i,/^(?:tolower\b)/i,/^(?:toupper\b)/i,/^(?:lenght\b)/i,/^(?:truncate\b)/i,/^(?:round\b)/i,/^(?:typeof\b)/i,/^(?:tostring\b)/i,/^(?:tochararray\b)/i,/^(?:start\b)/i,/^(?:with\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:dynamiclist\b)/i,/^(?:new\b)/i,/^(?:append\b)/i,/^(?:getvalue\b)/i,/^(?:setvalue\b)/i,/^(?:null\b)/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\()/i,/^(?:\))/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\+\+)/i,/^(?:\+)/i,/^(?:--)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:\^)/i,/^(?:%)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:<)/i,/^(?:>)/i,/^(?:=)/i,/^(?:\?)/i,/^(?:&&)/i,/^(?:\|\|)/i,/^(?:!)/i,/^(?::)/i,/^(?:,)/i,/^(?:;)/i,/^(?:(([0-9]+)\.([0-9]+)))/i,/^(?:([0-9]+))/i,/^(?:(([a-zA-Z_])[a-zA-Z0-9_ñÑ]*))/i,/^(?:(("[^"]*")))/i,/^(?:(('[^']')))/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}